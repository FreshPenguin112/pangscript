"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _antlr = _interopRequireDefault(require("antlr4"));
var _JavaScriptParserListener = _interopRequireDefault(require("./JavaScriptParserListener.js"));
var _JavaScriptParserVisitor = _interopRequireDefault(require("./JavaScriptParserVisitor.js"));
var _JavaScriptParserBase = _interopRequireDefault(require("./JavaScriptParserBase.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// Generated from JavaScriptParser.g4 by ANTLR 4.13.1
// jshint ignore: start

const serializedATN = [4, 1, 131, 1098, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7, 57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62, 2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2, 68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73, 7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7, 78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83, 2, 84, 7, 84, 2, 85, 7, 85, 1, 0, 3, 0, 174, 8, 0, 1, 0, 3, 0, 177, 8, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 203, 8, 2, 1, 3, 1, 3, 3, 3, 207, 8, 3, 1, 3, 1, 3, 1, 4, 4, 4, 212, 8, 4, 11, 4, 12, 4, 213, 1, 5, 1, 5, 1, 5, 1, 6, 3, 6, 220, 8, 6, 1, 6, 1, 6, 3, 6, 224, 8, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 3, 6, 231, 8, 6, 1, 7, 1, 7, 1, 7, 1, 7, 5, 7, 237, 8, 7, 10, 7, 12, 7, 240, 9, 7, 1, 7, 1, 7, 3, 7, 244, 8, 7, 3, 7, 246, 8, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 3, 8, 253, 8, 8, 1, 9, 1, 9, 3, 9, 257, 8, 9, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 1, 12, 1, 12, 3, 12, 266, 8, 12, 1, 12, 1, 12, 3, 12, 270, 8, 12, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 3, 14, 278, 8, 14, 1, 15, 1, 15, 3, 15, 282, 8, 15, 1, 15, 1, 15, 3, 15, 286, 8, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 3, 15, 295, 8, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 3, 16, 303, 8, 16, 1, 16, 1, 16, 3, 16, 307, 8, 16, 1, 17, 1, 17, 1, 17, 1, 17, 5, 17, 313, 8, 17, 10, 17, 12, 17, 316, 9, 17, 1, 17, 1, 17, 3, 17, 320, 8, 17, 3, 17, 322, 8, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 3, 18, 329, 8, 18, 1, 19, 1, 19, 1, 19, 3, 19, 334, 8, 19, 1, 20, 1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 1, 21, 5, 21, 343, 8, 21, 10, 21, 12, 21, 346, 9, 21, 1, 22, 1, 22, 1, 22, 3, 22, 351, 8, 22, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 3, 25, 366, 8, 25, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 3, 26, 386, 8, 26, 1, 26, 1, 26, 3, 26, 390, 8, 26, 1, 26, 1, 26, 3, 26, 394, 8, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 3, 26, 402, 8, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 3, 26, 411, 8, 26, 1, 26, 1, 26, 1, 26, 3, 26, 416, 8, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 3, 26, 423, 8, 26, 1, 27, 1, 27, 1, 27, 3, 27, 428, 8, 27, 1, 28, 1, 28, 1, 28, 3, 28, 433, 8, 28, 1, 28, 1, 28, 1, 29, 1, 29, 1, 29, 3, 29, 440, 8, 29, 1, 29, 1, 29, 1, 30, 1, 30, 1, 30, 3, 30, 447, 8, 30, 1, 30, 1, 30, 1, 31, 1, 31, 1, 31, 3, 31, 454, 8, 31, 1, 31, 1, 31, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 34, 1, 34, 3, 34, 472, 8, 34, 1, 34, 1, 34, 3, 34, 476, 8, 34, 3, 34, 478, 8, 34, 1, 34, 1, 34, 1, 35, 4, 35, 483, 8, 35, 11, 35, 12, 35, 484, 1, 36, 1, 36, 1, 36, 1, 36, 3, 36, 491, 8, 36, 1, 37, 1, 37, 1, 37, 3, 37, 496, 8, 37, 1, 38, 1, 38, 1, 38, 1, 38, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 40, 1, 40, 1, 40, 1, 40, 3, 40, 511, 8, 40, 1, 40, 3, 40, 514, 8, 40, 1, 41, 1, 41, 1, 41, 3, 41, 519, 8, 41, 1, 41, 3, 41, 522, 8, 41, 1, 41, 1, 41, 1, 42, 1, 42, 1, 42, 1, 43, 1, 43, 1, 43, 1, 44, 3, 44, 533, 8, 44, 1, 44, 1, 44, 3, 44, 537, 8, 44, 1, 44, 1, 44, 1, 44, 3, 44, 542, 8, 44, 1, 44, 1, 44, 1, 44, 1, 45, 1, 45, 1, 45, 1, 45, 1, 46, 1, 46, 3, 46, 553, 8, 46, 1, 46, 1, 46, 5, 46, 557, 8, 46, 10, 46, 12, 46, 560, 9, 46, 1, 46, 1, 46, 1, 47, 1, 47, 1, 47, 3, 47, 567, 8, 47, 1, 47, 1, 47, 1, 47, 1, 47, 3, 47, 573, 8, 47, 1, 47, 1, 47, 1, 47, 1, 47, 3, 47, 579, 8, 47, 1, 47, 1, 47, 3, 47, 583, 8, 47, 1, 48, 1, 48, 3, 48, 587, 8, 48, 1, 48, 3, 48, 590, 8, 48, 1, 48, 1, 48, 1, 48, 3, 48, 595, 8, 48, 1, 48, 1, 48, 1, 48, 1, 48, 3, 48, 601, 8, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 3, 48, 609, 8, 48, 1, 48, 1, 48, 1, 48, 3, 48, 614, 8, 48, 1, 48, 1, 48, 1, 48, 3, 48, 619, 8, 48, 1, 49, 1, 49, 3, 49, 623, 8, 49, 1, 50, 1, 50, 3, 50, 627, 8, 50, 1, 51, 1, 51, 1, 51, 1, 52, 1, 52, 1, 52, 5, 52, 635, 8, 52, 10, 52, 12, 52, 638, 9, 52, 1, 52, 1, 52, 3, 52, 642, 8, 52, 1, 52, 3, 52, 645, 8, 52, 1, 53, 1, 53, 1, 53, 3, 53, 650, 8, 53, 1, 54, 1, 54, 1, 54, 1, 55, 1, 55, 3, 55, 657, 8, 55, 1, 55, 1, 55, 1, 56, 4, 56, 662, 8, 56, 11, 56, 12, 56, 663, 1, 57, 1, 57, 1, 57, 1, 57, 1, 58, 5, 58, 671, 8, 58, 10, 58, 12, 58, 674, 9, 58, 1, 58, 3, 58, 677, 8, 58, 1, 58, 4, 58, 680, 8, 58, 11, 58, 12, 58, 681, 1, 58, 5, 58, 685, 8, 58, 10, 58, 12, 58, 688, 9, 58, 1, 58, 5, 58, 691, 8, 58, 10, 58, 12, 58, 694, 9, 58, 1, 59, 3, 59, 697, 8, 59, 1, 59, 1, 59, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 3, 60, 712, 8, 60, 1, 60, 3, 60, 715, 8, 60, 1, 60, 1, 60, 1, 60, 3, 60, 720, 8, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 3, 60, 737, 8, 60, 1, 60, 3, 60, 740, 8, 60, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 3, 61, 749, 8, 61, 1, 62, 1, 62, 1, 62, 1, 62, 5, 62, 755, 8, 62, 10, 62, 12, 62, 758, 9, 62, 1, 62, 3, 62, 761, 8, 62, 3, 62, 763, 8, 62, 1, 62, 1, 62, 1, 63, 3, 63, 768, 8, 63, 1, 63, 1, 63, 3, 63, 772, 8, 63, 1, 64, 1, 64, 1, 64, 5, 64, 777, 8, 64, 10, 64, 12, 64, 780, 9, 64, 1, 65, 1, 65, 1, 65, 1, 65, 3, 65, 786, 8, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 3, 65, 838, 8, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 3, 65, 900, 8, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 3, 65, 908, 8, 65, 1, 65, 1, 65, 3, 65, 912, 8, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 5, 65, 925, 8, 65, 10, 65, 12, 65, 928, 9, 65, 1, 66, 1, 66, 1, 66, 1, 67, 1, 67, 1, 67, 1, 67, 3, 67, 937, 8, 67, 1, 68, 1, 68, 1, 68, 1, 68, 5, 68, 943, 8, 68, 10, 68, 12, 68, 946, 9, 68, 1, 68, 3, 68, 949, 8, 68, 3, 68, 951, 8, 68, 1, 68, 1, 68, 1, 69, 1, 69, 3, 69, 957, 8, 69, 1, 69, 1, 69, 3, 69, 961, 8, 69, 1, 69, 1, 69, 3, 69, 965, 8, 69, 1, 69, 1, 69, 1, 69, 3, 69, 970, 8, 69, 1, 69, 1, 69, 1, 69, 1, 69, 3, 69, 976, 8, 69, 1, 70, 1, 70, 1, 70, 3, 70, 981, 8, 70, 1, 70, 3, 70, 984, 8, 70, 1, 71, 1, 71, 3, 71, 988, 8, 71, 1, 72, 1, 72, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 3, 73, 999, 8, 73, 1, 74, 1, 74, 5, 74, 1003, 8, 74, 10, 74, 12, 74, 1006, 9, 74, 1, 74, 1, 74, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 3, 75, 1015, 8, 75, 1, 76, 1, 76, 1, 77, 1, 77, 1, 78, 1, 78, 1, 78, 1, 78, 1, 79, 1, 79, 1, 79, 1, 79, 1, 80, 1, 80, 3, 80, 1031, 8, 80, 1, 81, 1, 81, 1, 82, 1, 82, 1, 82, 3, 82, 1038, 8, 82, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 3, 83, 1088, 8, 83, 1, 84, 1, 84, 1, 85, 1, 85, 1, 85, 1, 85, 3, 85, 1096, 8, 85, 1, 85, 0, 1, 130, 86, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 0, 12, 3, 0, 102, 102, 112, 112, 122, 122, 1, 0, 102, 103, 1, 0, 26, 28, 1, 0, 22, 23, 1, 0, 32, 34, 1, 0, 35, 38, 1, 0, 39, 42, 1, 0, 48, 60, 1, 0, 64, 68, 1, 0, 69, 72, 4, 0, 99, 102, 111, 111, 115, 115, 122, 122, 1, 0, 114, 115, 1267, 0, 173, 1, 0, 0, 0, 2, 180, 1, 0, 0, 0, 4, 202, 1, 0, 0, 0, 6, 204, 1, 0, 0, 0, 8, 211, 1, 0, 0, 0, 10, 215, 1, 0, 0, 0, 12, 230, 1, 0, 0, 0, 14, 232, 1, 0, 0, 0, 16, 249, 1, 0, 0, 0, 18, 256, 1, 0, 0, 0, 20, 258, 1, 0, 0, 0, 22, 260, 1, 0, 0, 0, 24, 265, 1, 0, 0, 0, 26, 271, 1, 0, 0, 0, 28, 274, 1, 0, 0, 0, 30, 294, 1, 0, 0, 0, 32, 306, 1, 0, 0, 0, 34, 308, 1, 0, 0, 0, 36, 325, 1, 0, 0, 0, 38, 333, 1, 0, 0, 0, 40, 335, 1, 0, 0, 0, 42, 338, 1, 0, 0, 0, 44, 347, 1, 0, 0, 0, 46, 352, 1, 0, 0, 0, 48, 354, 1, 0, 0, 0, 50, 358, 1, 0, 0, 0, 52, 422, 1, 0, 0, 0, 54, 427, 1, 0, 0, 0, 56, 429, 1, 0, 0, 0, 58, 436, 1, 0, 0, 0, 60, 443, 1, 0, 0, 0, 62, 450, 1, 0, 0, 0, 64, 457, 1, 0, 0, 0, 66, 463, 1, 0, 0, 0, 68, 469, 1, 0, 0, 0, 70, 482, 1, 0, 0, 0, 72, 486, 1, 0, 0, 0, 74, 492, 1, 0, 0, 0, 76, 497, 1, 0, 0, 0, 78, 501, 1, 0, 0, 0, 80, 506, 1, 0, 0, 0, 82, 515, 1, 0, 0, 0, 84, 525, 1, 0, 0, 0, 86, 528, 1, 0, 0, 0, 88, 532, 1, 0, 0, 0, 90, 546, 1, 0, 0, 0, 92, 552, 1, 0, 0, 0, 94, 582, 1, 0, 0, 0, 96, 618, 1, 0, 0, 0, 98, 620, 1, 0, 0, 0, 100, 626, 1, 0, 0, 0, 102, 628, 1, 0, 0, 0, 104, 644, 1, 0, 0, 0, 106, 646, 1, 0, 0, 0, 108, 651, 1, 0, 0, 0, 110, 654, 1, 0, 0, 0, 112, 661, 1, 0, 0, 0, 114, 665, 1, 0, 0, 0, 116, 672, 1, 0, 0, 0, 118, 696, 1, 0, 0, 0, 120, 739, 1, 0, 0, 0, 122, 748, 1, 0, 0, 0, 124, 750, 1, 0, 0, 0, 126, 767, 1, 0, 0, 0, 128, 773, 1, 0, 0, 0, 130, 837, 1, 0, 0, 0, 132, 929, 1, 0, 0, 0, 134, 936, 1, 0, 0, 0, 136, 938, 1, 0, 0, 0, 138, 975, 1, 0, 0, 0, 140, 983, 1, 0, 0, 0, 142, 987, 1, 0, 0, 0, 144, 989, 1, 0, 0, 0, 146, 998, 1, 0, 0, 0, 148, 1000, 1, 0, 0, 0, 150, 1014, 1, 0, 0, 0, 152, 1016, 1, 0, 0, 0, 154, 1018, 1, 0, 0, 0, 156, 1020, 1, 0, 0, 0, 158, 1024, 1, 0, 0, 0, 160, 1030, 1, 0, 0, 0, 162, 1032, 1, 0, 0, 0, 164, 1037, 1, 0, 0, 0, 166, 1087, 1, 0, 0, 0, 168, 1089, 1, 0, 0, 0, 170, 1095, 1, 0, 0, 0, 172, 174, 5, 1, 0, 0, 173, 172, 1, 0, 0, 0, 173, 174, 1, 0, 0, 0, 174, 176, 1, 0, 0, 0, 175, 177, 3, 112, 56, 0, 176, 175, 1, 0, 0, 0, 176, 177, 1, 0, 0, 0, 177, 178, 1, 0, 0, 0, 178, 179, 5, 0, 0, 1, 179, 1, 1, 0, 0, 0, 180, 181, 3, 4, 2, 0, 181, 3, 1, 0, 0, 0, 182, 203, 3, 6, 3, 0, 183, 203, 3, 40, 20, 0, 184, 203, 3, 10, 5, 0, 185, 203, 3, 30, 15, 0, 186, 203, 3, 46, 23, 0, 187, 203, 3, 90, 45, 0, 188, 203, 3, 88, 44, 0, 189, 203, 3, 48, 24, 0, 190, 203, 3, 50, 25, 0, 191, 203, 3, 52, 26, 0, 192, 203, 3, 56, 28, 0, 193, 203, 3, 58, 29, 0, 194, 203, 3, 60, 30, 0, 195, 203, 3, 62, 31, 0, 196, 203, 3, 64, 32, 0, 197, 203, 3, 76, 38, 0, 198, 203, 3, 66, 33, 0, 199, 203, 3, 78, 39, 0, 200, 203, 3, 80, 40, 0, 201, 203, 3, 86, 43, 0, 202, 182, 1, 0, 0, 0, 202, 183, 1, 0, 0, 0, 202, 184, 1, 0, 0, 0, 202, 185, 1, 0, 0, 0, 202, 186, 1, 0, 0, 0, 202, 187, 1, 0, 0, 0, 202, 188, 1, 0, 0, 0, 202, 189, 1, 0, 0, 0, 202, 190, 1, 0, 0, 0, 202, 191, 1, 0, 0, 0, 202, 192, 1, 0, 0, 0, 202, 193, 1, 0, 0, 0, 202, 194, 1, 0, 0, 0, 202, 195, 1, 0, 0, 0, 202, 196, 1, 0, 0, 0, 202, 197, 1, 0, 0, 0, 202, 198, 1, 0, 0, 0, 202, 199, 1, 0, 0, 0, 202, 200, 1, 0, 0, 0, 202, 201, 1, 0, 0, 0, 203, 5, 1, 0, 0, 0, 204, 206, 5, 9, 0, 0, 205, 207, 3, 8, 4, 0, 206, 205, 1, 0, 0, 0, 206, 207, 1, 0, 0, 0, 207, 208, 1, 0, 0, 0, 208, 209, 5, 11, 0, 0, 209, 7, 1, 0, 0, 0, 210, 212, 3, 4, 2, 0, 211, 210, 1, 0, 0, 0, 212, 213, 1, 0, 0, 0, 213, 211, 1, 0, 0, 0, 213, 214, 1, 0, 0, 0, 214, 9, 1, 0, 0, 0, 215, 216, 5, 110, 0, 0, 216, 217, 3, 12, 6, 0, 217, 11, 1, 0, 0, 0, 218, 220, 3, 22, 11, 0, 219, 218, 1, 0, 0, 0, 219, 220, 1, 0, 0, 0, 220, 223, 1, 0, 0, 0, 221, 224, 3, 24, 12, 0, 222, 224, 3, 14, 7, 0, 223, 221, 1, 0, 0, 0, 223, 222, 1, 0, 0, 0, 224, 225, 1, 0, 0, 0, 225, 226, 3, 26, 13, 0, 226, 227, 3, 170, 85, 0, 227, 231, 1, 0, 0, 0, 228, 229, 5, 123, 0, 0, 229, 231, 3, 170, 85, 0, 230, 219, 1, 0, 0, 0, 230, 228, 1, 0, 0, 0, 231, 13, 1, 0, 0, 0, 232, 238, 5, 9, 0, 0, 233, 234, 3, 16, 8, 0, 234, 235, 5, 13, 0, 0, 235, 237, 1, 0, 0, 0, 236, 233, 1, 0, 0, 0, 237, 240, 1, 0, 0, 0, 238, 236, 1, 0, 0, 0, 238, 239, 1, 0, 0, 0, 239, 245, 1, 0, 0, 0, 240, 238, 1, 0, 0, 0, 241, 243, 3, 16, 8, 0, 242, 244, 5, 13, 0, 0, 243, 242, 1, 0, 0, 0, 243, 244, 1, 0, 0, 0, 244, 246, 1, 0, 0, 0, 245, 241, 1, 0, 0, 0, 245, 246, 1, 0, 0, 0, 246, 247, 1, 0, 0, 0, 247, 248, 5, 11, 0, 0, 248, 15, 1, 0, 0, 0, 249, 252, 3, 18, 9, 0, 250, 251, 5, 99, 0, 0, 251, 253, 3, 20, 10, 0, 252, 250, 1, 0, 0, 0, 252, 253, 1, 0, 0, 0, 253, 17, 1, 0, 0, 0, 254, 257, 3, 160, 80, 0, 255, 257, 5, 123, 0, 0, 256, 254, 1, 0, 0, 0, 256, 255, 1, 0, 0, 0, 257, 19, 1, 0, 0, 0, 258, 259, 7, 0, 0, 0, 259, 21, 1, 0, 0, 0, 260, 261, 3, 28, 14, 0, 261, 262, 5, 13, 0, 0, 262, 23, 1, 0, 0, 0, 263, 266, 5, 26, 0, 0, 264, 266, 3, 160, 80, 0, 265, 263, 1, 0, 0, 0, 265, 264, 1, 0, 0, 0, 266, 269, 1, 0, 0, 0, 267, 268, 5, 99, 0, 0, 268, 270, 3, 160, 80, 0, 269, 267, 1, 0, 0, 0, 269, 270, 1, 0, 0, 0, 270, 25, 1, 0, 0, 0, 271, 272, 5, 100, 0, 0, 272, 273, 5, 123, 0, 0, 273, 27, 1, 0, 0, 0, 274, 277, 3, 160, 80, 0, 275, 276, 5, 99, 0, 0, 276, 278, 3, 160, 80, 0, 277, 275, 1, 0, 0, 0, 277, 278, 1, 0, 0, 0, 278, 29, 1, 0, 0, 0, 279, 281, 5, 109, 0, 0, 280, 282, 5, 93, 0, 0, 281, 280, 1, 0, 0, 0, 281, 282, 1, 0, 0, 0, 282, 285, 1, 0, 0, 0, 283, 286, 3, 32, 16, 0, 284, 286, 3, 38, 19, 0, 285, 283, 1, 0, 0, 0, 285, 284, 1, 0, 0, 0, 286, 287, 1, 0, 0, 0, 287, 288, 3, 170, 85, 0, 288, 295, 1, 0, 0, 0, 289, 290, 5, 109, 0, 0, 290, 291, 5, 93, 0, 0, 291, 292, 3, 130, 65, 0, 292, 293, 3, 170, 85, 0, 293, 295, 1, 0, 0, 0, 294, 279, 1, 0, 0, 0, 294, 289, 1, 0, 0, 0, 295, 31, 1, 0, 0, 0, 296, 297, 3, 24, 12, 0, 297, 298, 3, 26, 13, 0, 298, 299, 3, 170, 85, 0, 299, 307, 1, 0, 0, 0, 300, 302, 3, 34, 17, 0, 301, 303, 3, 26, 13, 0, 302, 301, 1, 0, 0, 0, 302, 303, 1, 0, 0, 0, 303, 304, 1, 0, 0, 0, 304, 305, 3, 170, 85, 0, 305, 307, 1, 0, 0, 0, 306, 296, 1, 0, 0, 0, 306, 300, 1, 0, 0, 0, 307, 33, 1, 0, 0, 0, 308, 314, 5, 9, 0, 0, 309, 310, 3, 36, 18, 0, 310, 311, 5, 13, 0, 0, 311, 313, 1, 0, 0, 0, 312, 309, 1, 0, 0, 0, 313, 316, 1, 0, 0, 0, 314, 312, 1, 0, 0, 0, 314, 315, 1, 0, 0, 0, 315, 321, 1, 0, 0, 0, 316, 314, 1, 0, 0, 0, 317, 319, 3, 36, 18, 0, 318, 320, 5, 13, 0, 0, 319, 318, 1, 0, 0, 0, 319, 320, 1, 0, 0, 0, 320, 322, 1, 0, 0, 0, 321, 317, 1, 0, 0, 0, 321, 322, 1, 0, 0, 0, 322, 323, 1, 0, 0, 0, 323, 324, 5, 11, 0, 0, 324, 35, 1, 0, 0, 0, 325, 328, 3, 18, 9, 0, 326, 327, 5, 99, 0, 0, 327, 329, 3, 18, 9, 0, 328, 326, 1, 0, 0, 0, 328, 329, 1, 0, 0, 0, 329, 37, 1, 0, 0, 0, 330, 334, 3, 40, 20, 0, 331, 334, 3, 90, 45, 0, 332, 334, 3, 88, 44, 0, 333, 330, 1, 0, 0, 0, 333, 331, 1, 0, 0, 0, 333, 332, 1, 0, 0, 0, 334, 39, 1, 0, 0, 0, 335, 336, 3, 42, 21, 0, 336, 337, 3, 170, 85, 0, 337, 41, 1, 0, 0, 0, 338, 339, 3, 54, 27, 0, 339, 344, 3, 44, 22, 0, 340, 341, 5, 13, 0, 0, 341, 343, 3, 44, 22, 0, 342, 340, 1, 0, 0, 0, 343, 346, 1, 0, 0, 0, 344, 342, 1, 0, 0, 0, 344, 345, 1, 0, 0, 0, 345, 43, 1, 0, 0, 0, 346, 344, 1, 0, 0, 0, 347, 350, 3, 134, 67, 0, 348, 349, 5, 14, 0, 0, 349, 351, 3, 130, 65, 0, 350, 348, 1, 0, 0, 0, 350, 351, 1, 0, 0, 0, 351, 45, 1, 0, 0, 0, 352, 353, 5, 12, 0, 0, 353, 47, 1, 0, 0, 0, 354, 355, 4, 24, 0, 0, 355, 356, 3, 128, 64, 0, 356, 357, 3, 170, 85, 0, 357, 49, 1, 0, 0, 0, 358, 359, 5, 94, 0, 0, 359, 360, 5, 7, 0, 0, 360, 361, 3, 128, 64, 0, 361, 362, 5, 8, 0, 0, 362, 365, 3, 4, 2, 0, 363, 364, 5, 78, 0, 0, 364, 366, 3, 4, 2, 0, 365, 363, 1, 0, 0, 0, 365, 366, 1, 0, 0, 0, 366, 51, 1, 0, 0, 0, 367, 368, 5, 74, 0, 0, 368, 369, 3, 4, 2, 0, 369, 370, 5, 88, 0, 0, 370, 371, 5, 7, 0, 0, 371, 372, 3, 128, 64, 0, 372, 373, 5, 8, 0, 0, 373, 374, 3, 170, 85, 0, 374, 423, 1, 0, 0, 0, 375, 376, 5, 88, 0, 0, 376, 377, 5, 7, 0, 0, 377, 378, 3, 128, 64, 0, 378, 379, 5, 8, 0, 0, 379, 380, 3, 4, 2, 0, 380, 423, 1, 0, 0, 0, 381, 382, 5, 86, 0, 0, 382, 385, 5, 7, 0, 0, 383, 386, 3, 128, 64, 0, 384, 386, 3, 42, 21, 0, 385, 383, 1, 0, 0, 0, 385, 384, 1, 0, 0, 0, 385, 386, 1, 0, 0, 0, 386, 387, 1, 0, 0, 0, 387, 389, 5, 12, 0, 0, 388, 390, 3, 128, 64, 0, 389, 388, 1, 0, 0, 0, 389, 390, 1, 0, 0, 0, 390, 391, 1, 0, 0, 0, 391, 393, 5, 12, 0, 0, 392, 394, 3, 128, 64, 0, 393, 392, 1, 0, 0, 0, 393, 394, 1, 0, 0, 0, 394, 395, 1, 0, 0, 0, 395, 396, 5, 8, 0, 0, 396, 423, 3, 4, 2, 0, 397, 398, 5, 86, 0, 0, 398, 401, 5, 7, 0, 0, 399, 402, 3, 130, 65, 0, 400, 402, 3, 42, 21, 0, 401, 399, 1, 0, 0, 0, 401, 400, 1, 0, 0, 0, 402, 403, 1, 0, 0, 0, 403, 404, 5, 97, 0, 0, 404, 405, 3, 128, 64, 0, 405, 406, 5, 8, 0, 0, 406, 407, 3, 4, 2, 0, 407, 423, 1, 0, 0, 0, 408, 410, 5, 86, 0, 0, 409, 411, 5, 112, 0, 0, 410, 409, 1, 0, 0, 0, 410, 411, 1, 0, 0, 0, 411, 412, 1, 0, 0, 0, 412, 415, 5, 7, 0, 0, 413, 416, 3, 130, 65, 0, 414, 416, 3, 42, 21, 0, 415, 413, 1, 0, 0, 0, 415, 414, 1, 0, 0, 0, 416, 417, 1, 0, 0, 0, 417, 418, 5, 101, 0, 0, 418, 419, 3, 128, 64, 0, 419, 420, 5, 8, 0, 0, 420, 421, 3, 4, 2, 0, 421, 423, 1, 0, 0, 0, 422, 367, 1, 0, 0, 0, 422, 375, 1, 0, 0, 0, 422, 381, 1, 0, 0, 0, 422, 397, 1, 0, 0, 0, 422, 408, 1, 0, 0, 0, 423, 53, 1, 0, 0, 0, 424, 428, 5, 80, 0, 0, 425, 428, 3, 168, 84, 0, 426, 428, 5, 108, 0, 0, 427, 424, 1, 0, 0, 0, 427, 425, 1, 0, 0, 0, 427, 426, 1, 0, 0, 0, 428, 55, 1, 0, 0, 0, 429, 432, 5, 85, 0, 0, 430, 431, 4, 28, 1, 0, 431, 433, 3, 162, 81, 0, 432, 430, 1, 0, 0, 0, 432, 433, 1, 0, 0, 0, 433, 434, 1, 0, 0, 0, 434, 435, 3, 170, 85, 0, 435, 57, 1, 0, 0, 0, 436, 439, 5, 73, 0, 0, 437, 438, 4, 29, 2, 0, 438, 440, 3, 162, 81, 0, 439, 437, 1, 0, 0, 0, 439, 440, 1, 0, 0, 0, 440, 441, 1, 0, 0, 0, 441, 442, 3, 170, 85, 0, 442, 59, 1, 0, 0, 0, 443, 446, 5, 83, 0, 0, 444, 445, 4, 30, 3, 0, 445, 447, 3, 128, 64, 0, 446, 444, 1, 0, 0, 0, 446, 447, 1, 0, 0, 0, 447, 448, 1, 0, 0, 0, 448, 449, 3, 170, 85, 0, 449, 61, 1, 0, 0, 0, 450, 453, 7, 1, 0, 0, 451, 452, 4, 31, 4, 0, 452, 454, 3, 128, 64, 0, 453, 451, 1, 0, 0, 0, 453, 454, 1, 0, 0, 0, 454, 455, 1, 0, 0, 0, 455, 456, 3, 170, 85, 0, 456, 63, 1, 0, 0, 0, 457, 458, 5, 92, 0, 0, 458, 459, 5, 7, 0, 0, 459, 460, 3, 128, 64, 0, 460, 461, 5, 8, 0, 0, 461, 462, 3, 4, 2, 0, 462, 65, 1, 0, 0, 0, 463, 464, 5, 87, 0, 0, 464, 465, 5, 7, 0, 0, 465, 466, 3, 128, 64, 0, 466, 467, 5, 8, 0, 0, 467, 468, 3, 68, 34, 0, 468, 67, 1, 0, 0, 0, 469, 471, 5, 9, 0, 0, 470, 472, 3, 70, 35, 0, 471, 470, 1, 0, 0, 0, 471, 472, 1, 0, 0, 0, 472, 477, 1, 0, 0, 0, 473, 475, 3, 74, 37, 0, 474, 476, 3, 70, 35, 0, 475, 474, 1, 0, 0, 0, 475, 476, 1, 0, 0, 0, 476, 478, 1, 0, 0, 0, 477, 473, 1, 0, 0, 0, 477, 478, 1, 0, 0, 0, 478, 479, 1, 0, 0, 0, 479, 480, 5, 11, 0, 0, 480, 69, 1, 0, 0, 0, 481, 483, 3, 72, 36, 0, 482, 481, 1, 0, 0, 0, 483, 484, 1, 0, 0, 0, 484, 482, 1, 0, 0, 0, 484, 485, 1, 0, 0, 0, 485, 71, 1, 0, 0, 0, 486, 487, 5, 77, 0, 0, 487, 488, 3, 128, 64, 0, 488, 490, 5, 17, 0, 0, 489, 491, 3, 8, 4, 0, 490, 489, 1, 0, 0, 0, 490, 491, 1, 0, 0, 0, 491, 73, 1, 0, 0, 0, 492, 493, 5, 93, 0, 0, 493, 495, 5, 17, 0, 0, 494, 496, 3, 8, 4, 0, 495, 494, 1, 0, 0, 0, 495, 496, 1, 0, 0, 0, 496, 75, 1, 0, 0, 0, 497, 498, 3, 162, 81, 0, 498, 499, 5, 17, 0, 0, 499, 500, 3, 4, 2, 0, 500, 77, 1, 0, 0, 0, 501, 502, 5, 95, 0, 0, 502, 503, 4, 39, 5, 0, 503, 504, 3, 128, 64, 0, 504, 505, 3, 170, 85, 0, 505, 79, 1, 0, 0, 0, 506, 507, 5, 98, 0, 0, 507, 513, 3, 6, 3, 0, 508, 510, 3, 82, 41, 0, 509, 511, 3, 84, 42, 0, 510, 509, 1, 0, 0, 0, 510, 511, 1, 0, 0, 0, 511, 514, 1, 0, 0, 0, 512, 514, 3, 84, 42, 0, 513, 508, 1, 0, 0, 0, 513, 512, 1, 0, 0, 0, 514, 81, 1, 0, 0, 0, 515, 521, 5, 81, 0, 0, 516, 518, 5, 7, 0, 0, 517, 519, 3, 134, 67, 0, 518, 517, 1, 0, 0, 0, 518, 519, 1, 0, 0, 0, 519, 520, 1, 0, 0, 0, 520, 522, 5, 8, 0, 0, 521, 516, 1, 0, 0, 0, 521, 522, 1, 0, 0, 0, 522, 523, 1, 0, 0, 0, 523, 524, 3, 6, 3, 0, 524, 83, 1, 0, 0, 0, 525, 526, 5, 82, 0, 0, 526, 527, 3, 6, 3, 0, 527, 85, 1, 0, 0, 0, 528, 529, 5, 89, 0, 0, 529, 530, 3, 170, 85, 0, 530, 87, 1, 0, 0, 0, 531, 533, 5, 111, 0, 0, 532, 531, 1, 0, 0, 0, 532, 533, 1, 0, 0, 0, 533, 534, 1, 0, 0, 0, 534, 536, 5, 90, 0, 0, 535, 537, 5, 26, 0, 0, 536, 535, 1, 0, 0, 0, 536, 537, 1, 0, 0, 0, 537, 538, 1, 0, 0, 0, 538, 539, 3, 162, 81, 0, 539, 541, 5, 7, 0, 0, 540, 542, 3, 104, 52, 0, 541, 540, 1, 0, 0, 0, 541, 542, 1, 0, 0, 0, 542, 543, 1, 0, 0, 0, 543, 544, 5, 8, 0, 0, 544, 545, 3, 110, 55, 0, 545, 89, 1, 0, 0, 0, 546, 547, 5, 104, 0, 0, 547, 548, 3, 162, 81, 0, 548, 549, 3, 92, 46, 0, 549, 91, 1, 0, 0, 0, 550, 551, 5, 106, 0, 0, 551, 553, 3, 130, 65, 0, 552, 550, 1, 0, 0, 0, 552, 553, 1, 0, 0, 0, 553, 554, 1, 0, 0, 0, 554, 558, 5, 9, 0, 0, 555, 557, 3, 94, 47, 0, 556, 555, 1, 0, 0, 0, 557, 560, 1, 0, 0, 0, 558, 556, 1, 0, 0, 0, 558, 559, 1, 0, 0, 0, 559, 561, 1, 0, 0, 0, 560, 558, 1, 0, 0, 0, 561, 562, 5, 11, 0, 0, 562, 93, 1, 0, 0, 0, 563, 567, 5, 121, 0, 0, 564, 565, 4, 47, 6, 0, 565, 567, 3, 162, 81, 0, 566, 563, 1, 0, 0, 0, 566, 564, 1, 0, 0, 0, 566, 567, 1, 0, 0, 0, 567, 568, 1, 0, 0, 0, 568, 583, 3, 96, 48, 0, 569, 573, 5, 121, 0, 0, 570, 571, 4, 47, 7, 0, 571, 573, 3, 162, 81, 0, 572, 569, 1, 0, 0, 0, 572, 570, 1, 0, 0, 0, 572, 573, 1, 0, 0, 0, 573, 574, 1, 0, 0, 0, 574, 583, 3, 98, 49, 0, 575, 579, 5, 121, 0, 0, 576, 577, 4, 47, 8, 0, 577, 579, 3, 162, 81, 0, 578, 575, 1, 0, 0, 0, 578, 576, 1, 0, 0, 0, 579, 580, 1, 0, 0, 0, 580, 583, 3, 6, 3, 0, 581, 583, 3, 46, 23, 0, 582, 566, 1, 0, 0, 0, 582, 572, 1, 0, 0, 0, 582, 578, 1, 0, 0, 0, 582, 581, 1, 0, 0, 0, 583, 95, 1, 0, 0, 0, 584, 585, 5, 111, 0, 0, 585, 587, 4, 48, 9, 0, 586, 584, 1, 0, 0, 0, 586, 587, 1, 0, 0, 0, 587, 589, 1, 0, 0, 0, 588, 590, 5, 26, 0, 0, 589, 588, 1, 0, 0, 0, 589, 590, 1, 0, 0, 0, 590, 591, 1, 0, 0, 0, 591, 592, 3, 100, 50, 0, 592, 594, 5, 7, 0, 0, 593, 595, 3, 104, 52, 0, 594, 593, 1, 0, 0, 0, 594, 595, 1, 0, 0, 0, 595, 596, 1, 0, 0, 0, 596, 597, 5, 8, 0, 0, 597, 598, 3, 110, 55, 0, 598, 619, 1, 0, 0, 0, 599, 601, 5, 26, 0, 0, 600, 599, 1, 0, 0, 0, 600, 601, 1, 0, 0, 0, 601, 602, 1, 0, 0, 0, 602, 603, 3, 156, 78, 0, 603, 604, 5, 7, 0, 0, 604, 605, 5, 8, 0, 0, 605, 606, 3, 110, 55, 0, 606, 619, 1, 0, 0, 0, 607, 609, 5, 26, 0, 0, 608, 607, 1, 0, 0, 0, 608, 609, 1, 0, 0, 0, 609, 610, 1, 0, 0, 0, 610, 611, 3, 158, 79, 0, 611, 613, 5, 7, 0, 0, 612, 614, 3, 104, 52, 0, 613, 612, 1, 0, 0, 0, 613, 614, 1, 0, 0, 0, 614, 615, 1, 0, 0, 0, 615, 616, 5, 8, 0, 0, 616, 617, 3, 110, 55, 0, 617, 619, 1, 0, 0, 0, 618, 586, 1, 0, 0, 0, 618, 600, 1, 0, 0, 0, 618, 608, 1, 0, 0, 0, 619, 97, 1, 0, 0, 0, 620, 622, 3, 100, 50, 0, 621, 623, 3, 132, 66, 0, 622, 621, 1, 0, 0, 0, 622, 623, 1, 0, 0, 0, 623, 99, 1, 0, 0, 0, 624, 627, 3, 122, 61, 0, 625, 627, 3, 102, 51, 0, 626, 624, 1, 0, 0, 0, 626, 625, 1, 0, 0, 0, 627, 101, 1, 0, 0, 0, 628, 629, 5, 31, 0, 0, 629, 630, 3, 160, 80, 0, 630, 103, 1, 0, 0, 0, 631, 636, 3, 106, 53, 0, 632, 633, 5, 13, 0, 0, 633, 635, 3, 106, 53, 0, 634, 632, 1, 0, 0, 0, 635, 638, 1, 0, 0, 0, 636, 634, 1, 0, 0, 0, 636, 637, 1, 0, 0, 0, 637, 641, 1, 0, 0, 0, 638, 636, 1, 0, 0, 0, 639, 640, 5, 13, 0, 0, 640, 642, 3, 108, 54, 0, 641, 639, 1, 0, 0, 0, 641, 642, 1, 0, 0, 0, 642, 645, 1, 0, 0, 0, 643, 645, 3, 108, 54, 0, 644, 631, 1, 0, 0, 0, 644, 643, 1, 0, 0, 0, 645, 105, 1, 0, 0, 0, 646, 649, 3, 134, 67, 0, 647, 648, 5, 14, 0, 0, 648, 650, 3, 130, 65, 0, 649, 647, 1, 0, 0, 0, 649, 650, 1, 0, 0, 0, 650, 107, 1, 0, 0, 0, 651, 652, 5, 18, 0, 0, 652, 653, 3, 130, 65, 0, 653, 109, 1, 0, 0, 0, 654, 656, 5, 9, 0, 0, 655, 657, 3, 112, 56, 0, 656, 655, 1, 0, 0, 0, 656, 657, 1, 0, 0, 0, 657, 658, 1, 0, 0, 0, 658, 659, 5, 11, 0, 0, 659, 111, 1, 0, 0, 0, 660, 662, 3, 2, 1, 0, 661, 660, 1, 0, 0, 0, 662, 663, 1, 0, 0, 0, 663, 661, 1, 0, 0, 0, 663, 664, 1, 0, 0, 0, 664, 113, 1, 0, 0, 0, 665, 666, 5, 5, 0, 0, 666, 667, 3, 116, 58, 0, 667, 668, 5, 6, 0, 0, 668, 115, 1, 0, 0, 0, 669, 671, 5, 13, 0, 0, 670, 669, 1, 0, 0, 0, 671, 674, 1, 0, 0, 0, 672, 670, 1, 0, 0, 0, 672, 673, 1, 0, 0, 0, 673, 676, 1, 0, 0, 0, 674, 672, 1, 0, 0, 0, 675, 677, 3, 118, 59, 0, 676, 675, 1, 0, 0, 0, 676, 677, 1, 0, 0, 0, 677, 686, 1, 0, 0, 0, 678, 680, 5, 13, 0, 0, 679, 678, 1, 0, 0, 0, 680, 681, 1, 0, 0, 0, 681, 679, 1, 0, 0, 0, 681, 682, 1, 0, 0, 0, 682, 683, 1, 0, 0, 0, 683, 685, 3, 118, 59, 0, 684, 679, 1, 0, 0, 0, 685, 688, 1, 0, 0, 0, 686, 684, 1, 0, 0, 0, 686, 687, 1, 0, 0, 0, 687, 692, 1, 0, 0, 0, 688, 686, 1, 0, 0, 0, 689, 691, 5, 13, 0, 0, 690, 689, 1, 0, 0, 0, 691, 694, 1, 0, 0, 0, 692, 690, 1, 0, 0, 0, 692, 693, 1, 0, 0, 0, 693, 117, 1, 0, 0, 0, 694, 692, 1, 0, 0, 0, 695, 697, 5, 18, 0, 0, 696, 695, 1, 0, 0, 0, 696, 697, 1, 0, 0, 0, 697, 698, 1, 0, 0, 0, 698, 699, 3, 130, 65, 0, 699, 119, 1, 0, 0, 0, 700, 701, 3, 122, 61, 0, 701, 702, 5, 17, 0, 0, 702, 703, 3, 130, 65, 0, 703, 740, 1, 0, 0, 0, 704, 705, 5, 5, 0, 0, 705, 706, 3, 130, 65, 0, 706, 707, 5, 6, 0, 0, 707, 708, 5, 17, 0, 0, 708, 709, 3, 130, 65, 0, 709, 740, 1, 0, 0, 0, 710, 712, 5, 111, 0, 0, 711, 710, 1, 0, 0, 0, 711, 712, 1, 0, 0, 0, 712, 714, 1, 0, 0, 0, 713, 715, 5, 26, 0, 0, 714, 713, 1, 0, 0, 0, 714, 715, 1, 0, 0, 0, 715, 716, 1, 0, 0, 0, 716, 717, 3, 122, 61, 0, 717, 719, 5, 7, 0, 0, 718, 720, 3, 104, 52, 0, 719, 718, 1, 0, 0, 0, 719, 720, 1, 0, 0, 0, 720, 721, 1, 0, 0, 0, 721, 722, 5, 8, 0, 0, 722, 723, 3, 110, 55, 0, 723, 740, 1, 0, 0, 0, 724, 725, 3, 156, 78, 0, 725, 726, 5, 7, 0, 0, 726, 727, 5, 8, 0, 0, 727, 728, 3, 110, 55, 0, 728, 740, 1, 0, 0, 0, 729, 730, 3, 158, 79, 0, 730, 731, 5, 7, 0, 0, 731, 732, 3, 106, 53, 0, 732, 733, 5, 8, 0, 0, 733, 734, 3, 110, 55, 0, 734, 740, 1, 0, 0, 0, 735, 737, 5, 18, 0, 0, 736, 735, 1, 0, 0, 0, 736, 737, 1, 0, 0, 0, 737, 738, 1, 0, 0, 0, 738, 740, 3, 130, 65, 0, 739, 700, 1, 0, 0, 0, 739, 704, 1, 0, 0, 0, 739, 711, 1, 0, 0, 0, 739, 724, 1, 0, 0, 0, 739, 729, 1, 0, 0, 0, 739, 736, 1, 0, 0, 0, 740, 121, 1, 0, 0, 0, 741, 749, 3, 160, 80, 0, 742, 749, 5, 123, 0, 0, 743, 749, 3, 152, 76, 0, 744, 745, 5, 5, 0, 0, 745, 746, 3, 130, 65, 0, 746, 747, 5, 6, 0, 0, 747, 749, 1, 0, 0, 0, 748, 741, 1, 0, 0, 0, 748, 742, 1, 0, 0, 0, 748, 743, 1, 0, 0, 0, 748, 744, 1, 0, 0, 0, 749, 123, 1, 0, 0, 0, 750, 762, 5, 7, 0, 0, 751, 756, 3, 126, 63, 0, 752, 753, 5, 13, 0, 0, 753, 755, 3, 126, 63, 0, 754, 752, 1, 0, 0, 0, 755, 758, 1, 0, 0, 0, 756, 754, 1, 0, 0, 0, 756, 757, 1, 0, 0, 0, 757, 760, 1, 0, 0, 0, 758, 756, 1, 0, 0, 0, 759, 761, 5, 13, 0, 0, 760, 759, 1, 0, 0, 0, 760, 761, 1, 0, 0, 0, 761, 763, 1, 0, 0, 0, 762, 751, 1, 0, 0, 0, 762, 763, 1, 0, 0, 0, 763, 764, 1, 0, 0, 0, 764, 765, 5, 8, 0, 0, 765, 125, 1, 0, 0, 0, 766, 768, 5, 18, 0, 0, 767, 766, 1, 0, 0, 0, 767, 768, 1, 0, 0, 0, 768, 771, 1, 0, 0, 0, 769, 772, 3, 130, 65, 0, 770, 772, 3, 162, 81, 0, 771, 769, 1, 0, 0, 0, 771, 770, 1, 0, 0, 0, 772, 127, 1, 0, 0, 0, 773, 778, 3, 130, 65, 0, 774, 775, 5, 13, 0, 0, 775, 777, 3, 130, 65, 0, 776, 774, 1, 0, 0, 0, 777, 780, 1, 0, 0, 0, 778, 776, 1, 0, 0, 0, 778, 779, 1, 0, 0, 0, 779, 129, 1, 0, 0, 0, 780, 778, 1, 0, 0, 0, 781, 782, 6, 65, -1, 0, 782, 838, 3, 138, 69, 0, 783, 785, 5, 104, 0, 0, 784, 786, 3, 162, 81, 0, 785, 784, 1, 0, 0, 0, 785, 786, 1, 0, 0, 0, 786, 787, 1, 0, 0, 0, 787, 838, 3, 92, 46, 0, 788, 789, 5, 79, 0, 0, 789, 790, 3, 162, 81, 0, 790, 791, 3, 124, 62, 0, 791, 838, 1, 0, 0, 0, 792, 793, 5, 79, 0, 0, 793, 794, 3, 130, 65, 0, 794, 795, 3, 124, 62, 0, 795, 838, 1, 0, 0, 0, 796, 797, 5, 79, 0, 0, 797, 838, 3, 130, 65, 42, 798, 799, 5, 79, 0, 0, 799, 800, 5, 19, 0, 0, 800, 838, 3, 162, 81, 0, 801, 802, 5, 96, 0, 0, 802, 838, 3, 130, 65, 37, 803, 804, 5, 84, 0, 0, 804, 838, 3, 130, 65, 36, 805, 806, 5, 76, 0, 0, 806, 838, 3, 130, 65, 35, 807, 808, 5, 20, 0, 0, 808, 838, 3, 130, 65, 34, 809, 810, 5, 21, 0, 0, 810, 838, 3, 130, 65, 33, 811, 812, 5, 22, 0, 0, 812, 838, 3, 130, 65, 32, 813, 814, 5, 23, 0, 0, 814, 838, 3, 130, 65, 31, 815, 816, 5, 24, 0, 0, 816, 838, 3, 130, 65, 30, 817, 818, 5, 25, 0, 0, 818, 838, 3, 130, 65, 29, 819, 820, 5, 112, 0, 0, 820, 838, 3, 130, 65, 28, 821, 822, 5, 110, 0, 0, 822, 823, 5, 7, 0, 0, 823, 824, 3, 130, 65, 0, 824, 825, 5, 8, 0, 0, 825, 838, 1, 0, 0, 0, 826, 838, 3, 62, 31, 0, 827, 838, 5, 91, 0, 0, 828, 838, 3, 162, 81, 0, 829, 838, 5, 107, 0, 0, 830, 838, 3, 146, 73, 0, 831, 838, 3, 114, 57, 0, 832, 838, 3, 136, 68, 0, 833, 834, 5, 7, 0, 0, 834, 835, 3, 128, 64, 0, 835, 836, 5, 8, 0, 0, 836, 838, 1, 0, 0, 0, 837, 781, 1, 0, 0, 0, 837, 783, 1, 0, 0, 0, 837, 788, 1, 0, 0, 0, 837, 792, 1, 0, 0, 0, 837, 796, 1, 0, 0, 0, 837, 798, 1, 0, 0, 0, 837, 801, 1, 0, 0, 0, 837, 803, 1, 0, 0, 0, 837, 805, 1, 0, 0, 0, 837, 807, 1, 0, 0, 0, 837, 809, 1, 0, 0, 0, 837, 811, 1, 0, 0, 0, 837, 813, 1, 0, 0, 0, 837, 815, 1, 0, 0, 0, 837, 817, 1, 0, 0, 0, 837, 819, 1, 0, 0, 0, 837, 821, 1, 0, 0, 0, 837, 826, 1, 0, 0, 0, 837, 827, 1, 0, 0, 0, 837, 828, 1, 0, 0, 0, 837, 829, 1, 0, 0, 0, 837, 830, 1, 0, 0, 0, 837, 831, 1, 0, 0, 0, 837, 832, 1, 0, 0, 0, 837, 833, 1, 0, 0, 0, 838, 926, 1, 0, 0, 0, 839, 840, 10, 47, 0, 0, 840, 841, 5, 16, 0, 0, 841, 925, 3, 130, 65, 48, 842, 843, 10, 27, 0, 0, 843, 844, 5, 29, 0, 0, 844, 925, 3, 130, 65, 27, 845, 846, 10, 26, 0, 0, 846, 847, 7, 2, 0, 0, 847, 925, 3, 130, 65, 27, 848, 849, 10, 25, 0, 0, 849, 850, 7, 3, 0, 0, 850, 925, 3, 130, 65, 26, 851, 852, 10, 24, 0, 0, 852, 853, 5, 30, 0, 0, 853, 925, 3, 130, 65, 25, 854, 855, 10, 23, 0, 0, 855, 856, 7, 4, 0, 0, 856, 925, 3, 130, 65, 24, 857, 858, 10, 22, 0, 0, 858, 859, 7, 5, 0, 0, 859, 925, 3, 130, 65, 23, 860, 861, 10, 21, 0, 0, 861, 862, 5, 75, 0, 0, 862, 925, 3, 130, 65, 22, 863, 864, 10, 20, 0, 0, 864, 865, 5, 97, 0, 0, 865, 925, 3, 130, 65, 21, 866, 867, 10, 19, 0, 0, 867, 868, 7, 6, 0, 0, 868, 925, 3, 130, 65, 20, 869, 870, 10, 18, 0, 0, 870, 871, 5, 43, 0, 0, 871, 925, 3, 130, 65, 19, 872, 873, 10, 17, 0, 0, 873, 874, 5, 44, 0, 0, 874, 925, 3, 130, 65, 18, 875, 876, 10, 16, 0, 0, 876, 877, 5, 45, 0, 0, 877, 925, 3, 130, 65, 17, 878, 879, 10, 15, 0, 0, 879, 880, 5, 46, 0, 0, 880, 925, 3, 130, 65, 16, 881, 882, 10, 14, 0, 0, 882, 883, 5, 47, 0, 0, 883, 925, 3, 130, 65, 15, 884, 885, 10, 13, 0, 0, 885, 886, 5, 15, 0, 0, 886, 887, 3, 130, 65, 0, 887, 888, 5, 17, 0, 0, 888, 889, 3, 130, 65, 14, 889, 925, 1, 0, 0, 0, 890, 891, 10, 12, 0, 0, 891, 892, 5, 14, 0, 0, 892, 925, 3, 130, 65, 12, 893, 894, 10, 11, 0, 0, 894, 895, 3, 144, 72, 0, 895, 896, 3, 130, 65, 11, 896, 925, 1, 0, 0, 0, 897, 899, 10, 46, 0, 0, 898, 900, 5, 16, 0, 0, 899, 898, 1, 0, 0, 0, 899, 900, 1, 0, 0, 0, 900, 901, 1, 0, 0, 0, 901, 902, 5, 5, 0, 0, 902, 903, 3, 128, 64, 0, 903, 904, 5, 6, 0, 0, 904, 925, 1, 0, 0, 0, 905, 907, 10, 45, 0, 0, 906, 908, 5, 15, 0, 0, 907, 906, 1, 0, 0, 0, 907, 908, 1, 0, 0, 0, 908, 909, 1, 0, 0, 0, 909, 911, 5, 19, 0, 0, 910, 912, 5, 31, 0, 0, 911, 910, 1, 0, 0, 0, 911, 912, 1, 0, 0, 0, 912, 913, 1, 0, 0, 0, 913, 925, 3, 160, 80, 0, 914, 915, 10, 41, 0, 0, 915, 925, 3, 124, 62, 0, 916, 917, 10, 39, 0, 0, 917, 918, 4, 65, 32, 0, 918, 925, 5, 20, 0, 0, 919, 920, 10, 38, 0, 0, 920, 921, 4, 65, 34, 0, 921, 925, 5, 21, 0, 0, 922, 923, 10, 9, 0, 0, 923, 925, 3, 148, 74, 0, 924, 839, 1, 0, 0, 0, 924, 842, 1, 0, 0, 0, 924, 845, 1, 0, 0, 0, 924, 848, 1, 0, 0, 0, 924, 851, 1, 0, 0, 0, 924, 854, 1, 0, 0, 0, 924, 857, 1, 0, 0, 0, 924, 860, 1, 0, 0, 0, 924, 863, 1, 0, 0, 0, 924, 866, 1, 0, 0, 0, 924, 869, 1, 0, 0, 0, 924, 872, 1, 0, 0, 0, 924, 875, 1, 0, 0, 0, 924, 878, 1, 0, 0, 0, 924, 881, 1, 0, 0, 0, 924, 884, 1, 0, 0, 0, 924, 890, 1, 0, 0, 0, 924, 893, 1, 0, 0, 0, 924, 897, 1, 0, 0, 0, 924, 905, 1, 0, 0, 0, 924, 914, 1, 0, 0, 0, 924, 916, 1, 0, 0, 0, 924, 919, 1, 0, 0, 0, 924, 922, 1, 0, 0, 0, 925, 928, 1, 0, 0, 0, 926, 924, 1, 0, 0, 0, 926, 927, 1, 0, 0, 0, 927, 131, 1, 0, 0, 0, 928, 926, 1, 0, 0, 0, 929, 930, 5, 14, 0, 0, 930, 931, 3, 130, 65, 0, 931, 133, 1, 0, 0, 0, 932, 937, 3, 162, 81, 0, 933, 937, 3, 166, 83, 0, 934, 937, 3, 114, 57, 0, 935, 937, 3, 136, 68, 0, 936, 932, 1, 0, 0, 0, 936, 933, 1, 0, 0, 0, 936, 934, 1, 0, 0, 0, 936, 935, 1, 0, 0, 0, 937, 135, 1, 0, 0, 0, 938, 950, 5, 9, 0, 0, 939, 944, 3, 120, 60, 0, 940, 941, 5, 13, 0, 0, 941, 943, 3, 120, 60, 0, 942, 940, 1, 0, 0, 0, 943, 946, 1, 0, 0, 0, 944, 942, 1, 0, 0, 0, 944, 945, 1, 0, 0, 0, 945, 948, 1, 0, 0, 0, 946, 944, 1, 0, 0, 0, 947, 949, 5, 13, 0, 0, 948, 947, 1, 0, 0, 0, 948, 949, 1, 0, 0, 0, 949, 951, 1, 0, 0, 0, 950, 939, 1, 0, 0, 0, 950, 951, 1, 0, 0, 0, 951, 952, 1, 0, 0, 0, 952, 953, 5, 11, 0, 0, 953, 137, 1, 0, 0, 0, 954, 976, 3, 88, 44, 0, 955, 957, 5, 111, 0, 0, 956, 955, 1, 0, 0, 0, 956, 957, 1, 0, 0, 0, 957, 958, 1, 0, 0, 0, 958, 960, 5, 90, 0, 0, 959, 961, 5, 26, 0, 0, 960, 959, 1, 0, 0, 0, 960, 961, 1, 0, 0, 0, 961, 962, 1, 0, 0, 0, 962, 964, 5, 7, 0, 0, 963, 965, 3, 104, 52, 0, 964, 963, 1, 0, 0, 0, 964, 965, 1, 0, 0, 0, 965, 966, 1, 0, 0, 0, 966, 967, 5, 8, 0, 0, 967, 976, 3, 110, 55, 0, 968, 970, 5, 111, 0, 0, 969, 968, 1, 0, 0, 0, 969, 970, 1, 0, 0, 0, 970, 971, 1, 0, 0, 0, 971, 972, 3, 140, 70, 0, 972, 973, 5, 61, 0, 0, 973, 974, 3, 142, 71, 0, 974, 976, 1, 0, 0, 0, 975, 954, 1, 0, 0, 0, 975, 956, 1, 0, 0, 0, 975, 969, 1, 0, 0, 0, 976, 139, 1, 0, 0, 0, 977, 984, 3, 122, 61, 0, 978, 980, 5, 7, 0, 0, 979, 981, 3, 104, 52, 0, 980, 979, 1, 0, 0, 0, 980, 981, 1, 0, 0, 0, 981, 982, 1, 0, 0, 0, 982, 984, 5, 8, 0, 0, 983, 977, 1, 0, 0, 0, 983, 978, 1, 0, 0, 0, 984, 141, 1, 0, 0, 0, 985, 988, 3, 130, 65, 0, 986, 988, 3, 110, 55, 0, 987, 985, 1, 0, 0, 0, 987, 986, 1, 0, 0, 0, 988, 143, 1, 0, 0, 0, 989, 990, 7, 7, 0, 0, 990, 145, 1, 0, 0, 0, 991, 999, 5, 62, 0, 0, 992, 999, 5, 63, 0, 0, 993, 999, 5, 123, 0, 0, 994, 999, 3, 148, 74, 0, 995, 999, 5, 4, 0, 0, 996, 999, 3, 152, 76, 0, 997, 999, 3, 154, 77, 0, 998, 991, 1, 0, 0, 0, 998, 992, 1, 0, 0, 0, 998, 993, 1, 0, 0, 0, 998, 994, 1, 0, 0, 0, 998, 995, 1, 0, 0, 0, 998, 996, 1, 0, 0, 0, 998, 997, 1, 0, 0, 0, 999, 147, 1, 0, 0, 0, 1000, 1004, 5, 124, 0, 0, 1001, 1003, 3, 150, 75, 0, 1002, 1001, 1, 0, 0, 0, 1003, 1006, 1, 0, 0, 0, 1004, 1002, 1, 0, 0, 0, 1004, 1005, 1, 0, 0, 0, 1005, 1007, 1, 0, 0, 0, 1006, 1004, 1, 0, 0, 0, 1007, 1008, 5, 124, 0, 0, 1008, 149, 1, 0, 0, 0, 1009, 1015, 5, 131, 0, 0, 1010, 1011, 5, 130, 0, 0, 1011, 1012, 3, 130, 65, 0, 1012, 1013, 5, 10, 0, 0, 1013, 1015, 1, 0, 0, 0, 1014, 1009, 1, 0, 0, 0, 1014, 1010, 1, 0, 0, 0, 1015, 151, 1, 0, 0, 0, 1016, 1017, 7, 8, 0, 0, 1017, 153, 1, 0, 0, 0, 1018, 1019, 7, 9, 0, 0, 1019, 155, 1, 0, 0, 0, 1020, 1021, 4, 78, 36, 0, 1021, 1022, 3, 162, 81, 0, 1022, 1023, 3, 100, 50, 0, 1023, 157, 1, 0, 0, 0, 1024, 1025, 4, 79, 37, 0, 1025, 1026, 3, 162, 81, 0, 1026, 1027, 3, 100, 50, 0, 1027, 159, 1, 0, 0, 0, 1028, 1031, 3, 162, 81, 0, 1029, 1031, 3, 164, 82, 0, 1030, 1028, 1, 0, 0, 0, 1030, 1029, 1, 0, 0, 0, 1031, 161, 1, 0, 0, 0, 1032, 1033, 7, 10, 0, 0, 1033, 163, 1, 0, 0, 0, 1034, 1038, 3, 166, 83, 0, 1035, 1038, 5, 62, 0, 0, 1036, 1038, 5, 63, 0, 0, 1037, 1034, 1, 0, 0, 0, 1037, 1035, 1, 0, 0, 0, 1037, 1036, 1, 0, 0, 0, 1038, 165, 1, 0, 0, 0, 1039, 1088, 5, 73, 0, 0, 1040, 1088, 5, 74, 0, 0, 1041, 1088, 5, 75, 0, 0, 1042, 1088, 5, 76, 0, 0, 1043, 1088, 5, 77, 0, 0, 1044, 1088, 5, 78, 0, 0, 1045, 1088, 5, 79, 0, 0, 1046, 1088, 5, 80, 0, 0, 1047, 1088, 5, 81, 0, 0, 1048, 1088, 5, 82, 0, 0, 1049, 1088, 5, 83, 0, 0, 1050, 1088, 5, 84, 0, 0, 1051, 1088, 5, 85, 0, 0, 1052, 1088, 5, 86, 0, 0, 1053, 1088, 5, 87, 0, 0, 1054, 1088, 5, 88, 0, 0, 1055, 1088, 5, 89, 0, 0, 1056, 1088, 5, 90, 0, 0, 1057, 1088, 5, 91, 0, 0, 1058, 1088, 5, 92, 0, 0, 1059, 1088, 5, 93, 0, 0, 1060, 1088, 5, 94, 0, 0, 1061, 1088, 5, 95, 0, 0, 1062, 1088, 5, 96, 0, 0, 1063, 1088, 5, 97, 0, 0, 1064, 1088, 5, 98, 0, 0, 1065, 1088, 5, 104, 0, 0, 1066, 1088, 5, 105, 0, 0, 1067, 1088, 5, 106, 0, 0, 1068, 1088, 5, 107, 0, 0, 1069, 1088, 5, 108, 0, 0, 1070, 1088, 5, 109, 0, 0, 1071, 1088, 5, 110, 0, 0, 1072, 1088, 5, 113, 0, 0, 1073, 1088, 3, 168, 84, 0, 1074, 1088, 5, 116, 0, 0, 1075, 1088, 5, 117, 0, 0, 1076, 1088, 5, 118, 0, 0, 1077, 1088, 5, 119, 0, 0, 1078, 1088, 5, 120, 0, 0, 1079, 1088, 5, 121, 0, 0, 1080, 1088, 5, 102, 0, 0, 1081, 1088, 5, 103, 0, 0, 1082, 1088, 5, 111, 0, 0, 1083, 1088, 5, 112, 0, 0, 1084, 1088, 5, 100, 0, 0, 1085, 1088, 5, 99, 0, 0, 1086, 1088, 5, 101, 0, 0, 1087, 1039, 1, 0, 0, 0, 1087, 1040, 1, 0, 0, 0, 1087, 1041, 1, 0, 0, 0, 1087, 1042, 1, 0, 0, 0, 1087, 1043, 1, 0, 0, 0, 1087, 1044, 1, 0, 0, 0, 1087, 1045, 1, 0, 0, 0, 1087, 1046, 1, 0, 0, 0, 1087, 1047, 1, 0, 0, 0, 1087, 1048, 1, 0, 0, 0, 1087, 1049, 1, 0, 0, 0, 1087, 1050, 1, 0, 0, 0, 1087, 1051, 1, 0, 0, 0, 1087, 1052, 1, 0, 0, 0, 1087, 1053, 1, 0, 0, 0, 1087, 1054, 1, 0, 0, 0, 1087, 1055, 1, 0, 0, 0, 1087, 1056, 1, 0, 0, 0, 1087, 1057, 1, 0, 0, 0, 1087, 1058, 1, 0, 0, 0, 1087, 1059, 1, 0, 0, 0, 1087, 1060, 1, 0, 0, 0, 1087, 1061, 1, 0, 0, 0, 1087, 1062, 1, 0, 0, 0, 1087, 1063, 1, 0, 0, 0, 1087, 1064, 1, 0, 0, 0, 1087, 1065, 1, 0, 0, 0, 1087, 1066, 1, 0, 0, 0, 1087, 1067, 1, 0, 0, 0, 1087, 1068, 1, 0, 0, 0, 1087, 1069, 1, 0, 0, 0, 1087, 1070, 1, 0, 0, 0, 1087, 1071, 1, 0, 0, 0, 1087, 1072, 1, 0, 0, 0, 1087, 1073, 1, 0, 0, 0, 1087, 1074, 1, 0, 0, 0, 1087, 1075, 1, 0, 0, 0, 1087, 1076, 1, 0, 0, 0, 1087, 1077, 1, 0, 0, 0, 1087, 1078, 1, 0, 0, 0, 1087, 1079, 1, 0, 0, 0, 1087, 1080, 1, 0, 0, 0, 1087, 1081, 1, 0, 0, 0, 1087, 1082, 1, 0, 0, 0, 1087, 1083, 1, 0, 0, 0, 1087, 1084, 1, 0, 0, 0, 1087, 1085, 1, 0, 0, 0, 1087, 1086, 1, 0, 0, 0, 1088, 167, 1, 0, 0, 0, 1089, 1090, 7, 11, 0, 0, 1090, 169, 1, 0, 0, 0, 1091, 1096, 5, 12, 0, 0, 1092, 1096, 5, 0, 0, 1, 1093, 1096, 4, 85, 38, 0, 1094, 1096, 4, 85, 39, 0, 1095, 1091, 1, 0, 0, 0, 1095, 1092, 1, 0, 0, 0, 1095, 1093, 1, 0, 0, 0, 1095, 1094, 1, 0, 0, 0, 1096, 171, 1, 0, 0, 0, 119, 173, 176, 202, 206, 213, 219, 223, 230, 238, 243, 245, 252, 256, 265, 269, 277, 281, 285, 294, 302, 306, 314, 319, 321, 328, 333, 344, 350, 365, 385, 389, 393, 401, 410, 415, 422, 427, 432, 439, 446, 453, 471, 475, 477, 484, 490, 495, 510, 513, 518, 521, 532, 536, 541, 552, 558, 566, 572, 578, 582, 586, 589, 594, 600, 608, 613, 618, 622, 626, 636, 641, 644, 649, 656, 663, 672, 676, 681, 686, 692, 696, 711, 714, 719, 736, 739, 748, 756, 760, 762, 767, 771, 778, 785, 837, 899, 907, 911, 924, 926, 936, 944, 948, 950, 956, 960, 964, 969, 975, 980, 983, 987, 998, 1004, 1014, 1030, 1037, 1087, 1095];
const atn = new _antlr.default.atn.ATNDeserializer().deserialize(serializedATN);
const decisionsToDFA = atn.decisionToState.map((ds, index) => new _antlr.default.dfa.DFA(ds, index));
const sharedContextCache = new _antlr.default.atn.PredictionContextCache();
class JavaScriptParser extends _JavaScriptParserBase.default {
  static grammarFileName = "JavaScriptParser.g4";
  static literalNames = [null, null, null, null, null, "'['", "']'", "'('", "')'", "'{'", null, "'}'", "';'", "','", "'='", "'?'", "'?.'", "':'", "'...'", "'.'", "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'*'", "'/'", "'%'", "'**'", "'??'", "'#'", "'>>'", "'<<'", "'>>>'", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'==='", "'!=='", "'&'", "'^'", "'|'", "'&&'", "'||'", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'>>>='", "'&='", "'^='", "'|='", "'**='", "'??='", "'=>'", "'null'", null, null, null, null, null, null, null, null, null, null, "'break'", "'do'", "'instanceof'", "'typeof'", "'case'", "'else'", "'new'", "'var'", "'catch'", "'finally'", "'return'", "'void'", "'continue'", "'for'", "'switch'", "'while'", "'debugger'", "'function'", "'this'", "'with'", "'default'", "'if'", "'throw'", "'delete'", "'in'", "'try'", "'as'", "'from'", "'of'", "'yield'", "'yield*'", "'class'", "'enum'", "'extends'", "'super'", "'const'", "'export'", "'import'", "'async'", "'await'", "'implements'", null, null, "'private'", "'public'", "'interface'", "'package'", "'protected'", "'static'"];
  static symbolicNames = [null, "HashBangLine", "MultiLineComment", "SingleLineComment", "RegularExpressionLiteral", "OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", "TemplateCloseBrace", "CloseBrace", "SemiColon", "Comma", "Assign", "QuestionMark", "QuestionMarkDot", "Colon", "Ellipsis", "Dot", "PlusPlus", "MinusMinus", "Plus", "Minus", "BitNot", "Not", "Multiply", "Divide", "Modulus", "Power", "NullCoalesce", "Hashtag", "RightShiftArithmetic", "LeftShiftArithmetic", "RightShiftLogical", "LessThan", "MoreThan", "LessThanEquals", "GreaterThanEquals", "Equals_", "NotEquals", "IdentityEquals", "IdentityNotEquals", "BitAnd", "BitXOr", "BitOr", "And", "Or", "MultiplyAssign", "DivideAssign", "ModulusAssign", "PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign", "RightShiftLogicalAssign", "BitAndAssign", "BitXorAssign", "BitOrAssign", "PowerAssign", "NullishCoalescingAssign", "ARROW", "NullLiteral", "BooleanLiteral", "DecimalLiteral", "HexIntegerLiteral", "OctalIntegerLiteral", "OctalIntegerLiteral2", "BinaryIntegerLiteral", "BigHexIntegerLiteral", "BigOctalIntegerLiteral", "BigBinaryIntegerLiteral", "BigDecimalIntegerLiteral", "Break", "Do", "Instanceof", "Typeof", "Case", "Else", "New", "Var", "Catch", "Finally", "Return", "Void", "Continue", "For", "Switch", "While", "Debugger", "Function_", "This", "With", "Default", "If", "Throw", "Delete", "In", "Try", "As", "From", "Of", "Yield", "YieldStar", "Class", "Enum", "Extends", "Super", "Const", "Export", "Import", "Async", "Await", "Implements", "StrictLet", "NonStrictLet", "Private", "Public", "Interface", "Package", "Protected", "Static", "Identifier", "StringLiteral", "BackTick", "WhiteSpaces", "LineTerminator", "HtmlComment", "CDataComment", "UnexpectedCharacter", "TemplateStringStartExpression", "TemplateStringAtom"];
  static ruleNames = ["program", "sourceElement", "statement", "block", "statementList", "importStatement", "importFromBlock", "importModuleItems", "importAliasName", "moduleExportName", "importedBinding", "importDefault", "importNamespace", "importFrom", "aliasName", "exportStatement", "exportFromBlock", "exportModuleItems", "exportAliasName", "declaration", "variableStatement", "variableDeclarationList", "variableDeclaration", "emptyStatement_", "expressionStatement", "ifStatement", "iterationStatement", "varModifier", "continueStatement", "breakStatement", "returnStatement", "yieldStatement", "withStatement", "switchStatement", "caseBlock", "caseClauses", "caseClause", "defaultClause", "labelledStatement", "throwStatement", "tryStatement", "catchProduction", "finallyProduction", "debuggerStatement", "functionDeclaration", "classDeclaration", "classTail", "classElement", "methodDefinition", "fieldDefinition", "classElementName", "privateIdentifier", "formalParameterList", "formalParameterArg", "lastFormalParameterArg", "functionBody", "sourceElements", "arrayLiteral", "elementList", "arrayElement", "propertyAssignment", "propertyName", "arguments", "argument", "expressionSequence", "singleExpression", "initializer", "assignable", "objectLiteral", "anonymousFunction", "arrowFunctionParameters", "arrowFunctionBody", "assignmentOperator", "literal", "templateStringLiteral", "templateStringAtom", "numericLiteral", "bigintLiteral", "getter", "setter", "identifierName", "identifier", "reservedWord", "keyword", "let_", "eos"];
  constructor(input) {
    super(input);
    this._interp = new _antlr.default.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = JavaScriptParser.ruleNames;
    this.literalNames = JavaScriptParser.literalNames;
    this.symbolicNames = JavaScriptParser.symbolicNames;
  }
  sempred(localctx, ruleIndex, predIndex) {
    switch (ruleIndex) {
      case 24:
        return this.expressionStatement_sempred(localctx, predIndex);
      case 28:
        return this.continueStatement_sempred(localctx, predIndex);
      case 29:
        return this.breakStatement_sempred(localctx, predIndex);
      case 30:
        return this.returnStatement_sempred(localctx, predIndex);
      case 31:
        return this.yieldStatement_sempred(localctx, predIndex);
      case 39:
        return this.throwStatement_sempred(localctx, predIndex);
      case 47:
        return this.classElement_sempred(localctx, predIndex);
      case 48:
        return this.methodDefinition_sempred(localctx, predIndex);
      case 65:
        return this.singleExpression_sempred(localctx, predIndex);
      case 78:
        return this.getter_sempred(localctx, predIndex);
      case 79:
        return this.setter_sempred(localctx, predIndex);
      case 85:
        return this.eos_sempred(localctx, predIndex);
      default:
        throw "No predicate with index:" + ruleIndex;
    }
  }
  expressionStatement_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 0:
        return this.notOpenBraceAndNotFunction();
      default:
        throw "No predicate with index:" + predIndex;
    }
  }
  continueStatement_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 1:
        return this.notLineTerminator();
      default:
        throw "No predicate with index:" + predIndex;
    }
  }
  breakStatement_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 2:
        return this.notLineTerminator();
      default:
        throw "No predicate with index:" + predIndex;
    }
  }
  returnStatement_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 3:
        return this.notLineTerminator();
      default:
        throw "No predicate with index:" + predIndex;
    }
  }
  yieldStatement_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 4:
        return this.notLineTerminator();
      default:
        throw "No predicate with index:" + predIndex;
    }
  }
  throwStatement_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 5:
        return this.notLineTerminator();
      default:
        throw "No predicate with index:" + predIndex;
    }
  }
  classElement_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 6:
        return this.n("static");
      case 7:
        return this.n("static");
      case 8:
        return this.n("static");
      default:
        throw "No predicate with index:" + predIndex;
    }
  }
  methodDefinition_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 9:
        return this.notLineTerminator();
      default:
        throw "No predicate with index:" + predIndex;
    }
  }
  singleExpression_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 10:
        return this.precpred(this._ctx, 47);
      case 11:
        return this.precpred(this._ctx, 27);
      case 12:
        return this.precpred(this._ctx, 26);
      case 13:
        return this.precpred(this._ctx, 25);
      case 14:
        return this.precpred(this._ctx, 24);
      case 15:
        return this.precpred(this._ctx, 23);
      case 16:
        return this.precpred(this._ctx, 22);
      case 17:
        return this.precpred(this._ctx, 21);
      case 18:
        return this.precpred(this._ctx, 20);
      case 19:
        return this.precpred(this._ctx, 19);
      case 20:
        return this.precpred(this._ctx, 18);
      case 21:
        return this.precpred(this._ctx, 17);
      case 22:
        return this.precpred(this._ctx, 16);
      case 23:
        return this.precpred(this._ctx, 15);
      case 24:
        return this.precpred(this._ctx, 14);
      case 25:
        return this.precpred(this._ctx, 13);
      case 26:
        return this.precpred(this._ctx, 12);
      case 27:
        return this.precpred(this._ctx, 11);
      case 28:
        return this.precpred(this._ctx, 46);
      case 29:
        return this.precpred(this._ctx, 45);
      case 30:
        return this.precpred(this._ctx, 41);
      case 31:
        return this.precpred(this._ctx, 39);
      case 32:
        return this.notLineTerminator();
      case 33:
        return this.precpred(this._ctx, 38);
      case 34:
        return this.notLineTerminator();
      case 35:
        return this.precpred(this._ctx, 9);
      default:
        throw "No predicate with index:" + predIndex;
    }
  }
  getter_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 36:
        return this.n("get");
      default:
        throw "No predicate with index:" + predIndex;
    }
  }
  setter_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 37:
        return this.n("set");
      default:
        throw "No predicate with index:" + predIndex;
    }
  }
  eos_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 38:
        return this.lineTerminatorAhead();
      case 39:
        return this.closeBrace();
      default:
        throw "No predicate with index:" + predIndex;
    }
  }
  program() {
    let localctx = new ProgramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, JavaScriptParser.RULE_program);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 173;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 0, this._ctx);
      if (la_ === 1) {
        this.state = 172;
        this.match(JavaScriptParser.HashBangLine);
      }
      this.state = 176;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 1, this._ctx);
      if (la_ === 1) {
        this.state = 175;
        this.sourceElements();
      }
      this.state = 178;
      this.match(JavaScriptParser.EOF);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  sourceElement() {
    let localctx = new SourceElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, JavaScriptParser.RULE_sourceElement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 180;
      this.statement();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  statement() {
    let localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, JavaScriptParser.RULE_statement);
    try {
      this.state = 202;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 2, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 182;
          this.block();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 183;
          this.variableStatement();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 184;
          this.importStatement();
          break;
        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 185;
          this.exportStatement();
          break;
        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 186;
          this.emptyStatement_();
          break;
        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 187;
          this.classDeclaration();
          break;
        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 188;
          this.functionDeclaration();
          break;
        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 189;
          this.expressionStatement();
          break;
        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 190;
          this.ifStatement();
          break;
        case 10:
          this.enterOuterAlt(localctx, 10);
          this.state = 191;
          this.iterationStatement();
          break;
        case 11:
          this.enterOuterAlt(localctx, 11);
          this.state = 192;
          this.continueStatement();
          break;
        case 12:
          this.enterOuterAlt(localctx, 12);
          this.state = 193;
          this.breakStatement();
          break;
        case 13:
          this.enterOuterAlt(localctx, 13);
          this.state = 194;
          this.returnStatement();
          break;
        case 14:
          this.enterOuterAlt(localctx, 14);
          this.state = 195;
          this.yieldStatement();
          break;
        case 15:
          this.enterOuterAlt(localctx, 15);
          this.state = 196;
          this.withStatement();
          break;
        case 16:
          this.enterOuterAlt(localctx, 16);
          this.state = 197;
          this.labelledStatement();
          break;
        case 17:
          this.enterOuterAlt(localctx, 17);
          this.state = 198;
          this.switchStatement();
          break;
        case 18:
          this.enterOuterAlt(localctx, 18);
          this.state = 199;
          this.throwStatement();
          break;
        case 19:
          this.enterOuterAlt(localctx, 19);
          this.state = 200;
          this.tryStatement();
          break;
        case 20:
          this.enterOuterAlt(localctx, 20);
          this.state = 201;
          this.debuggerStatement();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  block() {
    let localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, JavaScriptParser.RULE_block);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 204;
      this.match(JavaScriptParser.OpenBrace);
      this.state = 206;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 3, this._ctx);
      if (la_ === 1) {
        this.state = 205;
        this.statementList();
      }
      this.state = 208;
      this.match(JavaScriptParser.CloseBrace);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  statementList() {
    let localctx = new StatementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, JavaScriptParser.RULE_statementList);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 211;
      this._errHandler.sync(this);
      var _alt = 1;
      do {
        switch (_alt) {
          case 1:
            this.state = 210;
            this.statement();
            break;
          default:
            throw new _antlr.default.error.NoViableAltException(this);
        }
        this.state = 213;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 4, this._ctx);
      } while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  importStatement() {
    let localctx = new ImportStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, JavaScriptParser.RULE_importStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 215;
      this.match(JavaScriptParser.Import);
      this.state = 216;
      this.importFromBlock();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  importFromBlock() {
    let localctx = new ImportFromBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, JavaScriptParser.RULE_importFromBlock);
    try {
      this.state = 230;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 9:
        case 26:
        case 62:
        case 63:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
          this.enterOuterAlt(localctx, 1);
          this.state = 219;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 5, this._ctx);
          if (la_ === 1) {
            this.state = 218;
            this.importDefault();
          }
          this.state = 223;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case 26:
            case 62:
            case 63:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
              this.state = 221;
              this.importNamespace();
              break;
            case 9:
              this.state = 222;
              this.importModuleItems();
              break;
            default:
              throw new _antlr.default.error.NoViableAltException(this);
          }
          this.state = 225;
          this.importFrom();
          this.state = 226;
          this.eos();
          break;
        case 123:
          this.enterOuterAlt(localctx, 2);
          this.state = 228;
          this.match(JavaScriptParser.StringLiteral);
          this.state = 229;
          this.eos();
          break;
        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  importModuleItems() {
    let localctx = new ImportModuleItemsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, JavaScriptParser.RULE_importModuleItems);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 232;
      this.match(JavaScriptParser.OpenBrace);
      this.state = 238;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 8, this._ctx);
      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 233;
          this.importAliasName();
          this.state = 234;
          this.match(JavaScriptParser.Comma);
        }
        this.state = 240;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 8, this._ctx);
      }
      this.state = 245;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la - 62 & ~0x1f) === 0 && (1 << _la - 62 & 4294965251) !== 0 || (_la - 94 & ~0x1f) === 0 && (1 << _la - 94 & 1073741823) !== 0) {
        this.state = 241;
        this.importAliasName();
        this.state = 243;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === 13) {
          this.state = 242;
          this.match(JavaScriptParser.Comma);
        }
      }
      this.state = 247;
      this.match(JavaScriptParser.CloseBrace);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  importAliasName() {
    let localctx = new ImportAliasNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, JavaScriptParser.RULE_importAliasName);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 249;
      this.moduleExportName();
      this.state = 252;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === 99) {
        this.state = 250;
        this.match(JavaScriptParser.As);
        this.state = 251;
        this.importedBinding();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  moduleExportName() {
    let localctx = new ModuleExportNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, JavaScriptParser.RULE_moduleExportName);
    try {
      this.state = 256;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 62:
        case 63:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
          this.enterOuterAlt(localctx, 1);
          this.state = 254;
          this.identifierName();
          break;
        case 123:
          this.enterOuterAlt(localctx, 2);
          this.state = 255;
          this.match(JavaScriptParser.StringLiteral);
          break;
        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  importedBinding() {
    let localctx = new ImportedBindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, JavaScriptParser.RULE_importedBinding);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 258;
      _la = this._input.LA(1);
      if (!((_la - 102 & ~0x1f) === 0 && (1 << _la - 102 & 1049601) !== 0)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  importDefault() {
    let localctx = new ImportDefaultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, JavaScriptParser.RULE_importDefault);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 260;
      this.aliasName();
      this.state = 261;
      this.match(JavaScriptParser.Comma);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  importNamespace() {
    let localctx = new ImportNamespaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, JavaScriptParser.RULE_importNamespace);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 265;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 26:
          this.state = 263;
          this.match(JavaScriptParser.Multiply);
          break;
        case 62:
        case 63:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
          this.state = 264;
          this.identifierName();
          break;
        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
      this.state = 269;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === 99) {
        this.state = 267;
        this.match(JavaScriptParser.As);
        this.state = 268;
        this.identifierName();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  importFrom() {
    let localctx = new ImportFromContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, JavaScriptParser.RULE_importFrom);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 271;
      this.match(JavaScriptParser.From);
      this.state = 272;
      this.match(JavaScriptParser.StringLiteral);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  aliasName() {
    let localctx = new AliasNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, JavaScriptParser.RULE_aliasName);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 274;
      this.identifierName();
      this.state = 277;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === 99) {
        this.state = 275;
        this.match(JavaScriptParser.As);
        this.state = 276;
        this.identifierName();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  exportStatement() {
    let localctx = new ExportStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, JavaScriptParser.RULE_exportStatement);
    try {
      this.state = 294;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 18, this._ctx);
      switch (la_) {
        case 1:
          localctx = new ExportDeclarationContext(this, localctx);
          this.enterOuterAlt(localctx, 1);
          this.state = 279;
          this.match(JavaScriptParser.Export);
          this.state = 281;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 16, this._ctx);
          if (la_ === 1) {
            this.state = 280;
            this.match(JavaScriptParser.Default);
          }
          this.state = 285;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 17, this._ctx);
          switch (la_) {
            case 1:
              this.state = 283;
              this.exportFromBlock();
              break;
            case 2:
              this.state = 284;
              this.declaration();
              break;
          }
          this.state = 287;
          this.eos();
          break;
        case 2:
          localctx = new ExportDefaultDeclarationContext(this, localctx);
          this.enterOuterAlt(localctx, 2);
          this.state = 289;
          this.match(JavaScriptParser.Export);
          this.state = 290;
          this.match(JavaScriptParser.Default);
          this.state = 291;
          this.singleExpression(0);
          this.state = 292;
          this.eos();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  exportFromBlock() {
    let localctx = new ExportFromBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, JavaScriptParser.RULE_exportFromBlock);
    try {
      this.state = 306;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 26:
        case 62:
        case 63:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
          this.enterOuterAlt(localctx, 1);
          this.state = 296;
          this.importNamespace();
          this.state = 297;
          this.importFrom();
          this.state = 298;
          this.eos();
          break;
        case 9:
          this.enterOuterAlt(localctx, 2);
          this.state = 300;
          this.exportModuleItems();
          this.state = 302;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 19, this._ctx);
          if (la_ === 1) {
            this.state = 301;
            this.importFrom();
          }
          this.state = 304;
          this.eos();
          break;
        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  exportModuleItems() {
    let localctx = new ExportModuleItemsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, JavaScriptParser.RULE_exportModuleItems);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 308;
      this.match(JavaScriptParser.OpenBrace);
      this.state = 314;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 21, this._ctx);
      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 309;
          this.exportAliasName();
          this.state = 310;
          this.match(JavaScriptParser.Comma);
        }
        this.state = 316;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 21, this._ctx);
      }
      this.state = 321;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la - 62 & ~0x1f) === 0 && (1 << _la - 62 & 4294965251) !== 0 || (_la - 94 & ~0x1f) === 0 && (1 << _la - 94 & 1073741823) !== 0) {
        this.state = 317;
        this.exportAliasName();
        this.state = 319;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === 13) {
          this.state = 318;
          this.match(JavaScriptParser.Comma);
        }
      }
      this.state = 323;
      this.match(JavaScriptParser.CloseBrace);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  exportAliasName() {
    let localctx = new ExportAliasNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, JavaScriptParser.RULE_exportAliasName);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 325;
      this.moduleExportName();
      this.state = 328;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === 99) {
        this.state = 326;
        this.match(JavaScriptParser.As);
        this.state = 327;
        this.moduleExportName();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  declaration() {
    let localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, JavaScriptParser.RULE_declaration);
    try {
      this.state = 333;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 80:
        case 108:
        case 114:
        case 115:
          this.enterOuterAlt(localctx, 1);
          this.state = 330;
          this.variableStatement();
          break;
        case 104:
          this.enterOuterAlt(localctx, 2);
          this.state = 331;
          this.classDeclaration();
          break;
        case 90:
        case 111:
          this.enterOuterAlt(localctx, 3);
          this.state = 332;
          this.functionDeclaration();
          break;
        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  variableStatement() {
    let localctx = new VariableStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, JavaScriptParser.RULE_variableStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 335;
      this.variableDeclarationList();
      this.state = 336;
      this.eos();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  variableDeclarationList() {
    let localctx = new VariableDeclarationListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, JavaScriptParser.RULE_variableDeclarationList);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 338;
      this.varModifier();
      this.state = 339;
      this.variableDeclaration();
      this.state = 344;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 26, this._ctx);
      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 340;
          this.match(JavaScriptParser.Comma);
          this.state = 341;
          this.variableDeclaration();
        }
        this.state = 346;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 26, this._ctx);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  variableDeclaration() {
    let localctx = new VariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, JavaScriptParser.RULE_variableDeclaration);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 347;
      this.assignable();
      this.state = 350;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 27, this._ctx);
      if (la_ === 1) {
        this.state = 348;
        this.match(JavaScriptParser.Assign);
        this.state = 349;
        this.singleExpression(0);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  emptyStatement_() {
    let localctx = new EmptyStatement_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 46, JavaScriptParser.RULE_emptyStatement_);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 352;
      this.match(JavaScriptParser.SemiColon);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  expressionStatement() {
    let localctx = new ExpressionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, JavaScriptParser.RULE_expressionStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 354;
      if (!this.notOpenBraceAndNotFunction()) {
        throw new _antlr.default.error.FailedPredicateException(this, "this.notOpenBraceAndNotFunction()");
      }
      this.state = 355;
      this.expressionSequence();
      this.state = 356;
      this.eos();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  ifStatement() {
    let localctx = new IfStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, JavaScriptParser.RULE_ifStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 358;
      this.match(JavaScriptParser.If);
      this.state = 359;
      this.match(JavaScriptParser.OpenParen);
      this.state = 360;
      this.expressionSequence();
      this.state = 361;
      this.match(JavaScriptParser.CloseParen);
      this.state = 362;
      this.statement();
      this.state = 365;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 28, this._ctx);
      if (la_ === 1) {
        this.state = 363;
        this.match(JavaScriptParser.Else);
        this.state = 364;
        this.statement();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  iterationStatement() {
    let localctx = new IterationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, JavaScriptParser.RULE_iterationStatement);
    var _la = 0;
    try {
      this.state = 422;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 35, this._ctx);
      switch (la_) {
        case 1:
          localctx = new DoStatementContext(this, localctx);
          this.enterOuterAlt(localctx, 1);
          this.state = 367;
          this.match(JavaScriptParser.Do);
          this.state = 368;
          this.statement();
          this.state = 369;
          this.match(JavaScriptParser.While);
          this.state = 370;
          this.match(JavaScriptParser.OpenParen);
          this.state = 371;
          this.expressionSequence();
          this.state = 372;
          this.match(JavaScriptParser.CloseParen);
          this.state = 373;
          this.eos();
          break;
        case 2:
          localctx = new WhileStatementContext(this, localctx);
          this.enterOuterAlt(localctx, 2);
          this.state = 375;
          this.match(JavaScriptParser.While);
          this.state = 376;
          this.match(JavaScriptParser.OpenParen);
          this.state = 377;
          this.expressionSequence();
          this.state = 378;
          this.match(JavaScriptParser.CloseParen);
          this.state = 379;
          this.statement();
          break;
        case 3:
          localctx = new ForStatementContext(this, localctx);
          this.enterOuterAlt(localctx, 3);
          this.state = 381;
          this.match(JavaScriptParser.For);
          this.state = 382;
          this.match(JavaScriptParser.OpenParen);
          this.state = 385;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 29, this._ctx);
          if (la_ === 1) {
            this.state = 383;
            this.expressionSequence();
          } else if (la_ === 2) {
            this.state = 384;
            this.variableDeclarationList();
          }
          this.state = 387;
          this.match(JavaScriptParser.SemiColon);
          this.state = 389;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la & ~0x1f) === 0 && (1 << _la & 66060976) !== 0 || (_la - 62 & ~0x1f) === 0 && (1 << _la - 62 & 4294967295) !== 0 || (_la - 94 & ~0x1f) === 0 && (1 << _la - 94 & 2147483647) !== 0) {
            this.state = 388;
            this.expressionSequence();
          }
          this.state = 391;
          this.match(JavaScriptParser.SemiColon);
          this.state = 393;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la & ~0x1f) === 0 && (1 << _la & 66060976) !== 0 || (_la - 62 & ~0x1f) === 0 && (1 << _la - 62 & 4294967295) !== 0 || (_la - 94 & ~0x1f) === 0 && (1 << _la - 94 & 2147483647) !== 0) {
            this.state = 392;
            this.expressionSequence();
          }
          this.state = 395;
          this.match(JavaScriptParser.CloseParen);
          this.state = 396;
          this.statement();
          break;
        case 4:
          localctx = new ForInStatementContext(this, localctx);
          this.enterOuterAlt(localctx, 4);
          this.state = 397;
          this.match(JavaScriptParser.For);
          this.state = 398;
          this.match(JavaScriptParser.OpenParen);
          this.state = 401;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 32, this._ctx);
          switch (la_) {
            case 1:
              this.state = 399;
              this.singleExpression(0);
              break;
            case 2:
              this.state = 400;
              this.variableDeclarationList();
              break;
          }
          this.state = 403;
          this.match(JavaScriptParser.In);
          this.state = 404;
          this.expressionSequence();
          this.state = 405;
          this.match(JavaScriptParser.CloseParen);
          this.state = 406;
          this.statement();
          break;
        case 5:
          localctx = new ForOfStatementContext(this, localctx);
          this.enterOuterAlt(localctx, 5);
          this.state = 408;
          this.match(JavaScriptParser.For);
          this.state = 410;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 112) {
            this.state = 409;
            this.match(JavaScriptParser.Await);
          }
          this.state = 412;
          this.match(JavaScriptParser.OpenParen);
          this.state = 415;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 34, this._ctx);
          switch (la_) {
            case 1:
              this.state = 413;
              this.singleExpression(0);
              break;
            case 2:
              this.state = 414;
              this.variableDeclarationList();
              break;
          }
          this.state = 417;
          this.match(JavaScriptParser.Of);
          this.state = 418;
          this.expressionSequence();
          this.state = 419;
          this.match(JavaScriptParser.CloseParen);
          this.state = 420;
          this.statement();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  varModifier() {
    let localctx = new VarModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, JavaScriptParser.RULE_varModifier);
    try {
      this.state = 427;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 80:
          this.enterOuterAlt(localctx, 1);
          this.state = 424;
          this.match(JavaScriptParser.Var);
          break;
        case 114:
        case 115:
          this.enterOuterAlt(localctx, 2);
          this.state = 425;
          this.let_();
          break;
        case 108:
          this.enterOuterAlt(localctx, 3);
          this.state = 426;
          this.match(JavaScriptParser.Const);
          break;
        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  continueStatement() {
    let localctx = new ContinueStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, JavaScriptParser.RULE_continueStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 429;
      this.match(JavaScriptParser.Continue);
      this.state = 432;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 37, this._ctx);
      if (la_ === 1) {
        this.state = 430;
        if (!this.notLineTerminator()) {
          throw new _antlr.default.error.FailedPredicateException(this, "this.notLineTerminator()");
        }
        this.state = 431;
        this.identifier();
      }
      this.state = 434;
      this.eos();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  breakStatement() {
    let localctx = new BreakStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, JavaScriptParser.RULE_breakStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 436;
      this.match(JavaScriptParser.Break);
      this.state = 439;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 38, this._ctx);
      if (la_ === 1) {
        this.state = 437;
        if (!this.notLineTerminator()) {
          throw new _antlr.default.error.FailedPredicateException(this, "this.notLineTerminator()");
        }
        this.state = 438;
        this.identifier();
      }
      this.state = 441;
      this.eos();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  returnStatement() {
    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, JavaScriptParser.RULE_returnStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 443;
      this.match(JavaScriptParser.Return);
      this.state = 446;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 39, this._ctx);
      if (la_ === 1) {
        this.state = 444;
        if (!this.notLineTerminator()) {
          throw new _antlr.default.error.FailedPredicateException(this, "this.notLineTerminator()");
        }
        this.state = 445;
        this.expressionSequence();
      }
      this.state = 448;
      this.eos();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  yieldStatement() {
    let localctx = new YieldStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, JavaScriptParser.RULE_yieldStatement);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 450;
      _la = this._input.LA(1);
      if (!(_la === 102 || _la === 103)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
      this.state = 453;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 40, this._ctx);
      if (la_ === 1) {
        this.state = 451;
        if (!this.notLineTerminator()) {
          throw new _antlr.default.error.FailedPredicateException(this, "this.notLineTerminator()");
        }
        this.state = 452;
        this.expressionSequence();
      }
      this.state = 455;
      this.eos();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  withStatement() {
    let localctx = new WithStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, JavaScriptParser.RULE_withStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 457;
      this.match(JavaScriptParser.With);
      this.state = 458;
      this.match(JavaScriptParser.OpenParen);
      this.state = 459;
      this.expressionSequence();
      this.state = 460;
      this.match(JavaScriptParser.CloseParen);
      this.state = 461;
      this.statement();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  switchStatement() {
    let localctx = new SwitchStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, JavaScriptParser.RULE_switchStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 463;
      this.match(JavaScriptParser.Switch);
      this.state = 464;
      this.match(JavaScriptParser.OpenParen);
      this.state = 465;
      this.expressionSequence();
      this.state = 466;
      this.match(JavaScriptParser.CloseParen);
      this.state = 467;
      this.caseBlock();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  caseBlock() {
    let localctx = new CaseBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, JavaScriptParser.RULE_caseBlock);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 469;
      this.match(JavaScriptParser.OpenBrace);
      this.state = 471;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === 77) {
        this.state = 470;
        this.caseClauses();
      }
      this.state = 477;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === 93) {
        this.state = 473;
        this.defaultClause();
        this.state = 475;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === 77) {
          this.state = 474;
          this.caseClauses();
        }
      }
      this.state = 479;
      this.match(JavaScriptParser.CloseBrace);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  caseClauses() {
    let localctx = new CaseClausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, JavaScriptParser.RULE_caseClauses);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 482;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      do {
        this.state = 481;
        this.caseClause();
        this.state = 484;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      } while (_la === 77);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  caseClause() {
    let localctx = new CaseClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, JavaScriptParser.RULE_caseClause);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 486;
      this.match(JavaScriptParser.Case);
      this.state = 487;
      this.expressionSequence();
      this.state = 488;
      this.match(JavaScriptParser.Colon);
      this.state = 490;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 45, this._ctx);
      if (la_ === 1) {
        this.state = 489;
        this.statementList();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  defaultClause() {
    let localctx = new DefaultClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, JavaScriptParser.RULE_defaultClause);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 492;
      this.match(JavaScriptParser.Default);
      this.state = 493;
      this.match(JavaScriptParser.Colon);
      this.state = 495;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 46, this._ctx);
      if (la_ === 1) {
        this.state = 494;
        this.statementList();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  labelledStatement() {
    let localctx = new LabelledStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, JavaScriptParser.RULE_labelledStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 497;
      this.identifier();
      this.state = 498;
      this.match(JavaScriptParser.Colon);
      this.state = 499;
      this.statement();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  throwStatement() {
    let localctx = new ThrowStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, JavaScriptParser.RULE_throwStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 501;
      this.match(JavaScriptParser.Throw);
      this.state = 502;
      if (!this.notLineTerminator()) {
        throw new _antlr.default.error.FailedPredicateException(this, "this.notLineTerminator()");
      }
      this.state = 503;
      this.expressionSequence();
      this.state = 504;
      this.eos();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  tryStatement() {
    let localctx = new TryStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, JavaScriptParser.RULE_tryStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 506;
      this.match(JavaScriptParser.Try);
      this.state = 507;
      this.block();
      this.state = 513;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 81:
          this.state = 508;
          this.catchProduction();
          this.state = 510;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 47, this._ctx);
          if (la_ === 1) {
            this.state = 509;
            this.finallyProduction();
          }
          break;
        case 82:
          this.state = 512;
          this.finallyProduction();
          break;
        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  catchProduction() {
    let localctx = new CatchProductionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, JavaScriptParser.RULE_catchProduction);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 515;
      this.match(JavaScriptParser.Catch);
      this.state = 521;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === 7) {
        this.state = 516;
        this.match(JavaScriptParser.OpenParen);
        this.state = 518;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === 5 || _la === 9 || (_la - 73 & ~0x1f) === 0 && (1 << _la - 73 & 4294967295) !== 0 || (_la - 105 & ~0x1f) === 0 && (1 << _la - 105 & 262143) !== 0) {
          this.state = 517;
          this.assignable();
        }
        this.state = 520;
        this.match(JavaScriptParser.CloseParen);
      }
      this.state = 523;
      this.block();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  finallyProduction() {
    let localctx = new FinallyProductionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, JavaScriptParser.RULE_finallyProduction);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 525;
      this.match(JavaScriptParser.Finally);
      this.state = 526;
      this.block();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  debuggerStatement() {
    let localctx = new DebuggerStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, JavaScriptParser.RULE_debuggerStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 528;
      this.match(JavaScriptParser.Debugger);
      this.state = 529;
      this.eos();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  functionDeclaration() {
    let localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, JavaScriptParser.RULE_functionDeclaration);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 532;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === 111) {
        this.state = 531;
        this.match(JavaScriptParser.Async);
      }
      this.state = 534;
      this.match(JavaScriptParser.Function_);
      this.state = 536;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === 26) {
        this.state = 535;
        this.match(JavaScriptParser.Multiply);
      }
      this.state = 538;
      this.identifier();
      this.state = 539;
      this.match(JavaScriptParser.OpenParen);
      this.state = 541;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la & ~0x1f) === 0 && (1 << _la & 262688) !== 0 || (_la - 73 & ~0x1f) === 0 && (1 << _la - 73 & 4294967295) !== 0 || (_la - 105 & ~0x1f) === 0 && (1 << _la - 105 & 262143) !== 0) {
        this.state = 540;
        this.formalParameterList();
      }
      this.state = 543;
      this.match(JavaScriptParser.CloseParen);
      this.state = 544;
      this.functionBody();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  classDeclaration() {
    let localctx = new ClassDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, JavaScriptParser.RULE_classDeclaration);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 546;
      this.match(JavaScriptParser.Class);
      this.state = 547;
      this.identifier();
      this.state = 548;
      this.classTail();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  classTail() {
    let localctx = new ClassTailContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, JavaScriptParser.RULE_classTail);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 552;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === 106) {
        this.state = 550;
        this.match(JavaScriptParser.Extends);
        this.state = 551;
        this.singleExpression(0);
      }
      this.state = 554;
      this.match(JavaScriptParser.OpenBrace);
      this.state = 558;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 55, this._ctx);
      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 555;
          this.classElement();
        }
        this.state = 560;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 55, this._ctx);
      }
      this.state = 561;
      this.match(JavaScriptParser.CloseBrace);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  classElement() {
    let localctx = new ClassElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, JavaScriptParser.RULE_classElement);
    try {
      this.state = 582;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 59, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 566;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 56, this._ctx);
          if (la_ === 1) {
            this.state = 563;
            this.match(JavaScriptParser.Static);
          } else if (la_ === 2) {
            this.state = 564;
            if (!this.n("static")) {
              throw new _antlr.default.error.FailedPredicateException(this, "this.n(\"static\")");
            }
            this.state = 565;
            this.identifier();
          }
          this.state = 568;
          this.methodDefinition();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 572;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 57, this._ctx);
          if (la_ === 1) {
            this.state = 569;
            this.match(JavaScriptParser.Static);
          } else if (la_ === 2) {
            this.state = 570;
            if (!this.n("static")) {
              throw new _antlr.default.error.FailedPredicateException(this, "this.n(\"static\")");
            }
            this.state = 571;
            this.identifier();
          }
          this.state = 574;
          this.fieldDefinition();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 578;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 58, this._ctx);
          switch (la_) {
            case 1:
              this.state = 575;
              this.match(JavaScriptParser.Static);
              break;
            case 2:
              this.state = 576;
              if (!this.n("static")) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.n(\"static\")");
              }
              this.state = 577;
              this.identifier();
              break;
          }
          this.state = 580;
          this.block();
          break;
        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 581;
          this.emptyStatement_();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  methodDefinition() {
    let localctx = new MethodDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, JavaScriptParser.RULE_methodDefinition);
    var _la = 0;
    try {
      this.state = 618;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 66, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 586;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 60, this._ctx);
          if (la_ === 1) {
            this.state = 584;
            this.match(JavaScriptParser.Async);
            this.state = 585;
            if (!this.notLineTerminator()) {
              throw new _antlr.default.error.FailedPredicateException(this, "this.notLineTerminator()");
            }
          }
          this.state = 589;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 26) {
            this.state = 588;
            this.match(JavaScriptParser.Multiply);
          }
          this.state = 591;
          this.classElementName();
          this.state = 592;
          this.match(JavaScriptParser.OpenParen);
          this.state = 594;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la & ~0x1f) === 0 && (1 << _la & 262688) !== 0 || (_la - 73 & ~0x1f) === 0 && (1 << _la - 73 & 4294967295) !== 0 || (_la - 105 & ~0x1f) === 0 && (1 << _la - 105 & 262143) !== 0) {
            this.state = 593;
            this.formalParameterList();
          }
          this.state = 596;
          this.match(JavaScriptParser.CloseParen);
          this.state = 597;
          this.functionBody();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 600;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 63, this._ctx);
          if (la_ === 1) {
            this.state = 599;
            this.match(JavaScriptParser.Multiply);
          }
          this.state = 602;
          this.getter();
          this.state = 603;
          this.match(JavaScriptParser.OpenParen);
          this.state = 604;
          this.match(JavaScriptParser.CloseParen);
          this.state = 605;
          this.functionBody();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 608;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 64, this._ctx);
          if (la_ === 1) {
            this.state = 607;
            this.match(JavaScriptParser.Multiply);
          }
          this.state = 610;
          this.setter();
          this.state = 611;
          this.match(JavaScriptParser.OpenParen);
          this.state = 613;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la & ~0x1f) === 0 && (1 << _la & 262688) !== 0 || (_la - 73 & ~0x1f) === 0 && (1 << _la - 73 & 4294967295) !== 0 || (_la - 105 & ~0x1f) === 0 && (1 << _la - 105 & 262143) !== 0) {
            this.state = 612;
            this.formalParameterList();
          }
          this.state = 615;
          this.match(JavaScriptParser.CloseParen);
          this.state = 616;
          this.functionBody();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  fieldDefinition() {
    let localctx = new FieldDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, JavaScriptParser.RULE_fieldDefinition);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 620;
      this.classElementName();
      this.state = 622;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 67, this._ctx);
      if (la_ === 1) {
        this.state = 621;
        this.initializer();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  classElementName() {
    let localctx = new ClassElementNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, JavaScriptParser.RULE_classElementName);
    try {
      this.state = 626;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 5:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
          this.enterOuterAlt(localctx, 1);
          this.state = 624;
          this.propertyName();
          break;
        case 31:
          this.enterOuterAlt(localctx, 2);
          this.state = 625;
          this.privateIdentifier();
          break;
        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  privateIdentifier() {
    let localctx = new PrivateIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, JavaScriptParser.RULE_privateIdentifier);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 628;
      this.match(JavaScriptParser.Hashtag);
      this.state = 629;
      this.identifierName();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  formalParameterList() {
    let localctx = new FormalParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, JavaScriptParser.RULE_formalParameterList);
    var _la = 0;
    try {
      this.state = 644;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 5:
        case 9:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
          this.enterOuterAlt(localctx, 1);
          this.state = 631;
          this.formalParameterArg();
          this.state = 636;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 69, this._ctx);
          while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 632;
              this.match(JavaScriptParser.Comma);
              this.state = 633;
              this.formalParameterArg();
            }
            this.state = 638;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 69, this._ctx);
          }
          this.state = 641;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 13) {
            this.state = 639;
            this.match(JavaScriptParser.Comma);
            this.state = 640;
            this.lastFormalParameterArg();
          }
          break;
        case 18:
          this.enterOuterAlt(localctx, 2);
          this.state = 643;
          this.lastFormalParameterArg();
          break;
        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  formalParameterArg() {
    let localctx = new FormalParameterArgContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, JavaScriptParser.RULE_formalParameterArg);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 646;
      this.assignable();
      this.state = 649;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === 14) {
        this.state = 647;
        this.match(JavaScriptParser.Assign);
        this.state = 648;
        this.singleExpression(0);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  lastFormalParameterArg() {
    let localctx = new LastFormalParameterArgContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, JavaScriptParser.RULE_lastFormalParameterArg);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 651;
      this.match(JavaScriptParser.Ellipsis);
      this.state = 652;
      this.singleExpression(0);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  functionBody() {
    let localctx = new FunctionBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, JavaScriptParser.RULE_functionBody);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 654;
      this.match(JavaScriptParser.OpenBrace);
      this.state = 656;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 73, this._ctx);
      if (la_ === 1) {
        this.state = 655;
        this.sourceElements();
      }
      this.state = 658;
      this.match(JavaScriptParser.CloseBrace);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  sourceElements() {
    let localctx = new SourceElementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, JavaScriptParser.RULE_sourceElements);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 661;
      this._errHandler.sync(this);
      var _alt = 1;
      do {
        switch (_alt) {
          case 1:
            this.state = 660;
            this.sourceElement();
            break;
          default:
            throw new _antlr.default.error.NoViableAltException(this);
        }
        this.state = 663;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 74, this._ctx);
      } while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  arrayLiteral() {
    let localctx = new ArrayLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, JavaScriptParser.RULE_arrayLiteral);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 665;
      this.match(JavaScriptParser.OpenBracket);
      this.state = 666;
      this.elementList();
      this.state = 667;
      this.match(JavaScriptParser.CloseBracket);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  elementList() {
    let localctx = new ElementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, JavaScriptParser.RULE_elementList);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 672;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 75, this._ctx);
      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 669;
          this.match(JavaScriptParser.Comma);
        }
        this.state = 674;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 75, this._ctx);
      }
      this.state = 676;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la & ~0x1f) === 0 && (1 << _la & 66323120) !== 0 || (_la - 62 & ~0x1f) === 0 && (1 << _la - 62 & 4294967295) !== 0 || (_la - 94 & ~0x1f) === 0 && (1 << _la - 94 & 2147483647) !== 0) {
        this.state = 675;
        this.arrayElement();
      }
      this.state = 686;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 78, this._ctx);
      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 679;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          do {
            this.state = 678;
            this.match(JavaScriptParser.Comma);
            this.state = 681;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          } while (_la === 13);
          this.state = 683;
          this.arrayElement();
        }
        this.state = 688;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 78, this._ctx);
      }
      this.state = 692;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === 13) {
        this.state = 689;
        this.match(JavaScriptParser.Comma);
        this.state = 694;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  arrayElement() {
    let localctx = new ArrayElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, JavaScriptParser.RULE_arrayElement);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 696;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === 18) {
        this.state = 695;
        this.match(JavaScriptParser.Ellipsis);
      }
      this.state = 698;
      this.singleExpression(0);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  propertyAssignment() {
    let localctx = new PropertyAssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, JavaScriptParser.RULE_propertyAssignment);
    var _la = 0;
    try {
      this.state = 739;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 85, this._ctx);
      switch (la_) {
        case 1:
          localctx = new PropertyExpressionAssignmentContext(this, localctx);
          this.enterOuterAlt(localctx, 1);
          this.state = 700;
          this.propertyName();
          this.state = 701;
          this.match(JavaScriptParser.Colon);
          this.state = 702;
          this.singleExpression(0);
          break;
        case 2:
          localctx = new ComputedPropertyExpressionAssignmentContext(this, localctx);
          this.enterOuterAlt(localctx, 2);
          this.state = 704;
          this.match(JavaScriptParser.OpenBracket);
          this.state = 705;
          this.singleExpression(0);
          this.state = 706;
          this.match(JavaScriptParser.CloseBracket);
          this.state = 707;
          this.match(JavaScriptParser.Colon);
          this.state = 708;
          this.singleExpression(0);
          break;
        case 3:
          localctx = new FunctionPropertyContext(this, localctx);
          this.enterOuterAlt(localctx, 3);
          this.state = 711;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 81, this._ctx);
          if (la_ === 1) {
            this.state = 710;
            this.match(JavaScriptParser.Async);
          }
          this.state = 714;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 26) {
            this.state = 713;
            this.match(JavaScriptParser.Multiply);
          }
          this.state = 716;
          this.propertyName();
          this.state = 717;
          this.match(JavaScriptParser.OpenParen);
          this.state = 719;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la & ~0x1f) === 0 && (1 << _la & 262688) !== 0 || (_la - 73 & ~0x1f) === 0 && (1 << _la - 73 & 4294967295) !== 0 || (_la - 105 & ~0x1f) === 0 && (1 << _la - 105 & 262143) !== 0) {
            this.state = 718;
            this.formalParameterList();
          }
          this.state = 721;
          this.match(JavaScriptParser.CloseParen);
          this.state = 722;
          this.functionBody();
          break;
        case 4:
          localctx = new PropertyGetterContext(this, localctx);
          this.enterOuterAlt(localctx, 4);
          this.state = 724;
          this.getter();
          this.state = 725;
          this.match(JavaScriptParser.OpenParen);
          this.state = 726;
          this.match(JavaScriptParser.CloseParen);
          this.state = 727;
          this.functionBody();
          break;
        case 5:
          localctx = new PropertySetterContext(this, localctx);
          this.enterOuterAlt(localctx, 5);
          this.state = 729;
          this.setter();
          this.state = 730;
          this.match(JavaScriptParser.OpenParen);
          this.state = 731;
          this.formalParameterArg();
          this.state = 732;
          this.match(JavaScriptParser.CloseParen);
          this.state = 733;
          this.functionBody();
          break;
        case 6:
          localctx = new PropertyShorthandContext(this, localctx);
          this.enterOuterAlt(localctx, 6);
          this.state = 736;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 18) {
            this.state = 735;
            this.match(JavaScriptParser.Ellipsis);
          }
          this.state = 738;
          this.singleExpression(0);
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  propertyName() {
    let localctx = new PropertyNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, JavaScriptParser.RULE_propertyName);
    try {
      this.state = 748;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 62:
        case 63:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
          this.enterOuterAlt(localctx, 1);
          this.state = 741;
          this.identifierName();
          break;
        case 123:
          this.enterOuterAlt(localctx, 2);
          this.state = 742;
          this.match(JavaScriptParser.StringLiteral);
          break;
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
          this.enterOuterAlt(localctx, 3);
          this.state = 743;
          this.numericLiteral();
          break;
        case 5:
          this.enterOuterAlt(localctx, 4);
          this.state = 744;
          this.match(JavaScriptParser.OpenBracket);
          this.state = 745;
          this.singleExpression(0);
          this.state = 746;
          this.match(JavaScriptParser.CloseBracket);
          break;
        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  arguments() {
    let localctx = new ArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, JavaScriptParser.RULE_arguments);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 750;
      this.match(JavaScriptParser.OpenParen);
      this.state = 762;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la & ~0x1f) === 0 && (1 << _la & 66323120) !== 0 || (_la - 62 & ~0x1f) === 0 && (1 << _la - 62 & 4294967295) !== 0 || (_la - 94 & ~0x1f) === 0 && (1 << _la - 94 & 2147483647) !== 0) {
        this.state = 751;
        this.argument();
        this.state = 756;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 87, this._ctx);
        while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            this.state = 752;
            this.match(JavaScriptParser.Comma);
            this.state = 753;
            this.argument();
          }
          this.state = 758;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 87, this._ctx);
        }
        this.state = 760;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === 13) {
          this.state = 759;
          this.match(JavaScriptParser.Comma);
        }
      }
      this.state = 764;
      this.match(JavaScriptParser.CloseParen);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  argument() {
    let localctx = new ArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, JavaScriptParser.RULE_argument);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 767;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === 18) {
        this.state = 766;
        this.match(JavaScriptParser.Ellipsis);
      }
      this.state = 771;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 91, this._ctx);
      switch (la_) {
        case 1:
          this.state = 769;
          this.singleExpression(0);
          break;
        case 2:
          this.state = 770;
          this.identifier();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  expressionSequence() {
    let localctx = new ExpressionSequenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, JavaScriptParser.RULE_expressionSequence);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 773;
      this.singleExpression(0);
      this.state = 778;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 92, this._ctx);
      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 774;
          this.match(JavaScriptParser.Comma);
          this.state = 775;
          this.singleExpression(0);
        }
        this.state = 780;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 92, this._ctx);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  singleExpression(_p) {
    if (_p === undefined) {
      _p = 0;
    }
    const _parentctx = this._ctx;
    const _parentState = this.state;
    let localctx = new SingleExpressionContext(this, this._ctx, _parentState);
    let _prevctx = localctx;
    const _startState = 130;
    this.enterRecursionRule(localctx, 130, JavaScriptParser.RULE_singleExpression, _p);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 837;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 94, this._ctx);
      switch (la_) {
        case 1:
          localctx = new FunctionExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 782;
          this.anonymousFunction();
          break;
        case 2:
          localctx = new ClassExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 783;
          this.match(JavaScriptParser.Class);
          this.state = 785;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la - 99 & ~0x1f) === 0 && (1 << _la - 99 & 8458255) !== 0) {
            this.state = 784;
            this.identifier();
          }
          this.state = 787;
          this.classTail();
          break;
        case 3:
          localctx = new NewExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 788;
          this.match(JavaScriptParser.New);
          this.state = 789;
          this.identifier();
          this.state = 790;
          this.arguments();
          break;
        case 4:
          localctx = new NewExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 792;
          this.match(JavaScriptParser.New);
          this.state = 793;
          this.singleExpression(0);
          this.state = 794;
          this.arguments();
          break;
        case 5:
          localctx = new NewExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 796;
          this.match(JavaScriptParser.New);
          this.state = 797;
          this.singleExpression(42);
          break;
        case 6:
          localctx = new MetaExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 798;
          this.match(JavaScriptParser.New);
          this.state = 799;
          this.match(JavaScriptParser.Dot);
          this.state = 800;
          this.identifier();
          break;
        case 7:
          localctx = new DeleteExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 801;
          this.match(JavaScriptParser.Delete);
          this.state = 802;
          this.singleExpression(37);
          break;
        case 8:
          localctx = new VoidExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 803;
          this.match(JavaScriptParser.Void);
          this.state = 804;
          this.singleExpression(36);
          break;
        case 9:
          localctx = new TypeofExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 805;
          this.match(JavaScriptParser.Typeof);
          this.state = 806;
          this.singleExpression(35);
          break;
        case 10:
          localctx = new PreIncrementExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 807;
          this.match(JavaScriptParser.PlusPlus);
          this.state = 808;
          this.singleExpression(34);
          break;
        case 11:
          localctx = new PreDecreaseExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 809;
          this.match(JavaScriptParser.MinusMinus);
          this.state = 810;
          this.singleExpression(33);
          break;
        case 12:
          localctx = new UnaryPlusExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 811;
          this.match(JavaScriptParser.Plus);
          this.state = 812;
          this.singleExpression(32);
          break;
        case 13:
          localctx = new UnaryMinusExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 813;
          this.match(JavaScriptParser.Minus);
          this.state = 814;
          this.singleExpression(31);
          break;
        case 14:
          localctx = new BitNotExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 815;
          this.match(JavaScriptParser.BitNot);
          this.state = 816;
          this.singleExpression(30);
          break;
        case 15:
          localctx = new NotExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 817;
          this.match(JavaScriptParser.Not);
          this.state = 818;
          this.singleExpression(29);
          break;
        case 16:
          localctx = new AwaitExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 819;
          this.match(JavaScriptParser.Await);
          this.state = 820;
          this.singleExpression(28);
          break;
        case 17:
          localctx = new ImportExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 821;
          this.match(JavaScriptParser.Import);
          this.state = 822;
          this.match(JavaScriptParser.OpenParen);
          this.state = 823;
          this.singleExpression(0);
          this.state = 824;
          this.match(JavaScriptParser.CloseParen);
          break;
        case 18:
          localctx = new YieldExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 826;
          this.yieldStatement();
          break;
        case 19:
          localctx = new ThisExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 827;
          this.match(JavaScriptParser.This);
          break;
        case 20:
          localctx = new IdentifierExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 828;
          this.identifier();
          break;
        case 21:
          localctx = new SuperExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 829;
          this.match(JavaScriptParser.Super);
          break;
        case 22:
          localctx = new LiteralExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 830;
          this.literal();
          break;
        case 23:
          localctx = new ArrayLiteralExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 831;
          this.arrayLiteral();
          break;
        case 24:
          localctx = new ObjectLiteralExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 832;
          this.objectLiteral();
          break;
        case 25:
          localctx = new ParenthesizedExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 833;
          this.match(JavaScriptParser.OpenParen);
          this.state = 834;
          this.expressionSequence();
          this.state = 835;
          this.match(JavaScriptParser.CloseParen);
          break;
      }
      this._ctx.stop = this._input.LT(-1);
      this.state = 926;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 99, this._ctx);
      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          if (this._parseListeners !== null) {
            this.triggerExitRuleEvent();
          }
          _prevctx = localctx;
          this.state = 924;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 98, this._ctx);
          switch (la_) {
            case 1:
              localctx = new OptionalChainExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 839;
              if (!this.precpred(this._ctx, 47)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 47)");
              }
              this.state = 840;
              this.match(JavaScriptParser.QuestionMarkDot);
              this.state = 841;
              this.singleExpression(48);
              break;
            case 2:
              localctx = new PowerExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 842;
              if (!this.precpred(this._ctx, 27)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
              }
              this.state = 843;
              this.match(JavaScriptParser.Power);
              this.state = 844;
              this.singleExpression(27);
              break;
            case 3:
              localctx = new MultiplicativeExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 845;
              if (!this.precpred(this._ctx, 26)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
              }
              this.state = 846;
              _la = this._input.LA(1);
              if (!((_la & ~0x1f) === 0 && (1 << _la & 469762048) !== 0)) {
                this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 847;
              this.singleExpression(27);
              break;
            case 4:
              localctx = new AdditiveExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 848;
              if (!this.precpred(this._ctx, 25)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
              }
              this.state = 849;
              _la = this._input.LA(1);
              if (!(_la === 22 || _la === 23)) {
                this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 850;
              this.singleExpression(26);
              break;
            case 5:
              localctx = new CoalesceExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 851;
              if (!this.precpred(this._ctx, 24)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
              }
              this.state = 852;
              this.match(JavaScriptParser.NullCoalesce);
              this.state = 853;
              this.singleExpression(25);
              break;
            case 6:
              localctx = new BitShiftExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 854;
              if (!this.precpred(this._ctx, 23)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
              }
              this.state = 855;
              _la = this._input.LA(1);
              if (!((_la - 32 & ~0x1f) === 0 && (1 << _la - 32 & 7) !== 0)) {
                this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 856;
              this.singleExpression(24);
              break;
            case 7:
              localctx = new RelationalExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 857;
              if (!this.precpred(this._ctx, 22)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
              }
              this.state = 858;
              _la = this._input.LA(1);
              if (!((_la - 35 & ~0x1f) === 0 && (1 << _la - 35 & 15) !== 0)) {
                this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 859;
              this.singleExpression(23);
              break;
            case 8:
              localctx = new InstanceofExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 860;
              if (!this.precpred(this._ctx, 21)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
              }
              this.state = 861;
              this.match(JavaScriptParser.Instanceof);
              this.state = 862;
              this.singleExpression(22);
              break;
            case 9:
              localctx = new InExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 863;
              if (!this.precpred(this._ctx, 20)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
              }
              this.state = 864;
              this.match(JavaScriptParser.In);
              this.state = 865;
              this.singleExpression(21);
              break;
            case 10:
              localctx = new EqualityExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 866;
              if (!this.precpred(this._ctx, 19)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
              }
              this.state = 867;
              _la = this._input.LA(1);
              if (!((_la - 39 & ~0x1f) === 0 && (1 << _la - 39 & 15) !== 0)) {
                this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 868;
              this.singleExpression(20);
              break;
            case 11:
              localctx = new BitAndExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 869;
              if (!this.precpred(this._ctx, 18)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
              }
              this.state = 870;
              this.match(JavaScriptParser.BitAnd);
              this.state = 871;
              this.singleExpression(19);
              break;
            case 12:
              localctx = new BitXOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 872;
              if (!this.precpred(this._ctx, 17)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
              }
              this.state = 873;
              this.match(JavaScriptParser.BitXOr);
              this.state = 874;
              this.singleExpression(18);
              break;
            case 13:
              localctx = new BitOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 875;
              if (!this.precpred(this._ctx, 16)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
              }
              this.state = 876;
              this.match(JavaScriptParser.BitOr);
              this.state = 877;
              this.singleExpression(17);
              break;
            case 14:
              localctx = new LogicalAndExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 878;
              if (!this.precpred(this._ctx, 15)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
              }
              this.state = 879;
              this.match(JavaScriptParser.And);
              this.state = 880;
              this.singleExpression(16);
              break;
            case 15:
              localctx = new LogicalOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 881;
              if (!this.precpred(this._ctx, 14)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
              }
              this.state = 882;
              this.match(JavaScriptParser.Or);
              this.state = 883;
              this.singleExpression(15);
              break;
            case 16:
              localctx = new TernaryExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 884;
              if (!this.precpred(this._ctx, 13)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
              }
              this.state = 885;
              this.match(JavaScriptParser.QuestionMark);
              this.state = 886;
              this.singleExpression(0);
              this.state = 887;
              this.match(JavaScriptParser.Colon);
              this.state = 888;
              this.singleExpression(14);
              break;
            case 17:
              localctx = new AssignmentExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 890;
              if (!this.precpred(this._ctx, 12)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
              }
              this.state = 891;
              this.match(JavaScriptParser.Assign);
              this.state = 892;
              this.singleExpression(12);
              break;
            case 18:
              localctx = new AssignmentOperatorExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 893;
              if (!this.precpred(this._ctx, 11)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
              }
              this.state = 894;
              this.assignmentOperator();
              this.state = 895;
              this.singleExpression(11);
              break;
            case 19:
              localctx = new MemberIndexExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 897;
              if (!this.precpred(this._ctx, 46)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 46)");
              }
              this.state = 899;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 16) {
                this.state = 898;
                this.match(JavaScriptParser.QuestionMarkDot);
              }
              this.state = 901;
              this.match(JavaScriptParser.OpenBracket);
              this.state = 902;
              this.expressionSequence();
              this.state = 903;
              this.match(JavaScriptParser.CloseBracket);
              break;
            case 20:
              localctx = new MemberDotExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 905;
              if (!this.precpred(this._ctx, 45)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 45)");
              }
              this.state = 907;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 15) {
                this.state = 906;
                this.match(JavaScriptParser.QuestionMark);
              }
              this.state = 909;
              this.match(JavaScriptParser.Dot);
              this.state = 911;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 31) {
                this.state = 910;
                this.match(JavaScriptParser.Hashtag);
              }
              this.state = 913;
              this.identifierName();
              break;
            case 21:
              localctx = new ArgumentsExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 914;
              if (!this.precpred(this._ctx, 41)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 41)");
              }
              this.state = 915;
              this.arguments();
              break;
            case 22:
              localctx = new PostIncrementExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 916;
              if (!this.precpred(this._ctx, 39)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 39)");
              }
              this.state = 917;
              if (!this.notLineTerminator()) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.notLineTerminator()");
              }
              this.state = 918;
              this.match(JavaScriptParser.PlusPlus);
              break;
            case 23:
              localctx = new PostDecreaseExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 919;
              if (!this.precpred(this._ctx, 38)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 38)");
              }
              this.state = 920;
              if (!this.notLineTerminator()) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.notLineTerminator()");
              }
              this.state = 921;
              this.match(JavaScriptParser.MinusMinus);
              break;
            case 24:
              localctx = new TemplateStringExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 922;
              if (!this.precpred(this._ctx, 9)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
              }
              this.state = 923;
              this.templateStringLiteral();
              break;
          }
        }
        this.state = 928;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 99, this._ctx);
      }
    } catch (error) {
      if (error instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = error;
        this._errHandler.reportError(this, error);
        this._errHandler.recover(this, error);
      } else {
        throw error;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }
    return localctx;
  }
  initializer() {
    let localctx = new InitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, JavaScriptParser.RULE_initializer);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 929;
      this.match(JavaScriptParser.Assign);
      this.state = 930;
      this.singleExpression(0);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  assignable() {
    let localctx = new AssignableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, JavaScriptParser.RULE_assignable);
    try {
      this.state = 936;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 100, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 932;
          this.identifier();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 933;
          this.keyword();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 934;
          this.arrayLiteral();
          break;
        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 935;
          this.objectLiteral();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  objectLiteral() {
    let localctx = new ObjectLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, JavaScriptParser.RULE_objectLiteral);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 938;
      this.match(JavaScriptParser.OpenBrace);
      this.state = 950;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 103, this._ctx);
      if (la_ === 1) {
        this.state = 939;
        this.propertyAssignment();
        this.state = 944;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 101, this._ctx);
        while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            this.state = 940;
            this.match(JavaScriptParser.Comma);
            this.state = 941;
            this.propertyAssignment();
          }
          this.state = 946;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 101, this._ctx);
        }
        this.state = 948;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === 13) {
          this.state = 947;
          this.match(JavaScriptParser.Comma);
        }
      }
      this.state = 952;
      this.match(JavaScriptParser.CloseBrace);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  anonymousFunction() {
    let localctx = new AnonymousFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, JavaScriptParser.RULE_anonymousFunction);
    var _la = 0;
    try {
      this.state = 975;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 108, this._ctx);
      switch (la_) {
        case 1:
          localctx = new NamedFunctionContext(this, localctx);
          this.enterOuterAlt(localctx, 1);
          this.state = 954;
          this.functionDeclaration();
          break;
        case 2:
          localctx = new AnonymousFunctionDeclContext(this, localctx);
          this.enterOuterAlt(localctx, 2);
          this.state = 956;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 111) {
            this.state = 955;
            this.match(JavaScriptParser.Async);
          }
          this.state = 958;
          this.match(JavaScriptParser.Function_);
          this.state = 960;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === 26) {
            this.state = 959;
            this.match(JavaScriptParser.Multiply);
          }
          this.state = 962;
          this.match(JavaScriptParser.OpenParen);
          this.state = 964;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la & ~0x1f) === 0 && (1 << _la & 262688) !== 0 || (_la - 73 & ~0x1f) === 0 && (1 << _la - 73 & 4294967295) !== 0 || (_la - 105 & ~0x1f) === 0 && (1 << _la - 105 & 262143) !== 0) {
            this.state = 963;
            this.formalParameterList();
          }
          this.state = 966;
          this.match(JavaScriptParser.CloseParen);
          this.state = 967;
          this.functionBody();
          break;
        case 3:
          localctx = new ArrowFunctionContext(this, localctx);
          this.enterOuterAlt(localctx, 3);
          this.state = 969;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 107, this._ctx);
          if (la_ === 1) {
            this.state = 968;
            this.match(JavaScriptParser.Async);
          }
          this.state = 971;
          this.arrowFunctionParameters();
          this.state = 972;
          this.match(JavaScriptParser.ARROW);
          this.state = 973;
          this.arrowFunctionBody();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  arrowFunctionParameters() {
    let localctx = new ArrowFunctionParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, JavaScriptParser.RULE_arrowFunctionParameters);
    var _la = 0;
    try {
      this.state = 983;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 5:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
          this.enterOuterAlt(localctx, 1);
          this.state = 977;
          this.propertyName();
          break;
        case 7:
          this.enterOuterAlt(localctx, 2);
          this.state = 978;
          this.match(JavaScriptParser.OpenParen);
          this.state = 980;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la & ~0x1f) === 0 && (1 << _la & 262688) !== 0 || (_la - 73 & ~0x1f) === 0 && (1 << _la - 73 & 4294967295) !== 0 || (_la - 105 & ~0x1f) === 0 && (1 << _la - 105 & 262143) !== 0) {
            this.state = 979;
            this.formalParameterList();
          }
          this.state = 982;
          this.match(JavaScriptParser.CloseParen);
          break;
        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  arrowFunctionBody() {
    let localctx = new ArrowFunctionBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, JavaScriptParser.RULE_arrowFunctionBody);
    try {
      this.state = 987;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 111, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 985;
          this.singleExpression(0);
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 986;
          this.functionBody();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  assignmentOperator() {
    let localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, JavaScriptParser.RULE_assignmentOperator);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 989;
      _la = this._input.LA(1);
      if (!((_la - 48 & ~0x1f) === 0 && (1 << _la - 48 & 8191) !== 0)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  literal() {
    let localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, JavaScriptParser.RULE_literal);
    try {
      this.state = 998;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 62:
          this.enterOuterAlt(localctx, 1);
          this.state = 991;
          this.match(JavaScriptParser.NullLiteral);
          break;
        case 63:
          this.enterOuterAlt(localctx, 2);
          this.state = 992;
          this.match(JavaScriptParser.BooleanLiteral);
          break;
        case 123:
          this.enterOuterAlt(localctx, 3);
          this.state = 993;
          this.match(JavaScriptParser.StringLiteral);
          break;
        case 124:
          this.enterOuterAlt(localctx, 4);
          this.state = 994;
          this.templateStringLiteral();
          break;
        case 4:
          this.enterOuterAlt(localctx, 5);
          this.state = 995;
          this.match(JavaScriptParser.RegularExpressionLiteral);
          break;
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
          this.enterOuterAlt(localctx, 6);
          this.state = 996;
          this.numericLiteral();
          break;
        case 69:
        case 70:
        case 71:
        case 72:
          this.enterOuterAlt(localctx, 7);
          this.state = 997;
          this.bigintLiteral();
          break;
        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  templateStringLiteral() {
    let localctx = new TemplateStringLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, JavaScriptParser.RULE_templateStringLiteral);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1000;
      this.match(JavaScriptParser.BackTick);
      this.state = 1004;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === 130 || _la === 131) {
        this.state = 1001;
        this.templateStringAtom();
        this.state = 1006;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 1007;
      this.match(JavaScriptParser.BackTick);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  templateStringAtom() {
    let localctx = new TemplateStringAtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, JavaScriptParser.RULE_templateStringAtom);
    try {
      this.state = 1014;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 131:
          this.enterOuterAlt(localctx, 1);
          this.state = 1009;
          this.match(JavaScriptParser.TemplateStringAtom);
          break;
        case 130:
          this.enterOuterAlt(localctx, 2);
          this.state = 1010;
          this.match(JavaScriptParser.TemplateStringStartExpression);
          this.state = 1011;
          this.singleExpression(0);
          this.state = 1012;
          this.match(JavaScriptParser.TemplateCloseBrace);
          break;
        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  numericLiteral() {
    let localctx = new NumericLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, JavaScriptParser.RULE_numericLiteral);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1016;
      _la = this._input.LA(1);
      if (!((_la - 64 & ~0x1f) === 0 && (1 << _la - 64 & 31) !== 0)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  bigintLiteral() {
    let localctx = new BigintLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, JavaScriptParser.RULE_bigintLiteral);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1018;
      _la = this._input.LA(1);
      if (!((_la - 69 & ~0x1f) === 0 && (1 << _la - 69 & 15) !== 0)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  getter() {
    let localctx = new GetterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, JavaScriptParser.RULE_getter);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1020;
      if (!this.n("get")) {
        throw new _antlr.default.error.FailedPredicateException(this, "this.n(\"get\")");
      }
      this.state = 1021;
      this.identifier();
      this.state = 1022;
      this.classElementName();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  setter() {
    let localctx = new SetterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, JavaScriptParser.RULE_setter);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1024;
      if (!this.n("set")) {
        throw new _antlr.default.error.FailedPredicateException(this, "this.n(\"set\")");
      }
      this.state = 1025;
      this.identifier();
      this.state = 1026;
      this.classElementName();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  identifierName() {
    let localctx = new IdentifierNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, JavaScriptParser.RULE_identifierName);
    try {
      this.state = 1030;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 115, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1028;
          this.identifier();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1029;
          this.reservedWord();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  identifier() {
    let localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, JavaScriptParser.RULE_identifier);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1032;
      _la = this._input.LA(1);
      if (!((_la - 99 & ~0x1f) === 0 && (1 << _la - 99 & 8458255) !== 0)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  reservedWord() {
    let localctx = new ReservedWordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, JavaScriptParser.RULE_reservedWord);
    try {
      this.state = 1037;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
          this.enterOuterAlt(localctx, 1);
          this.state = 1034;
          this.keyword();
          break;
        case 62:
          this.enterOuterAlt(localctx, 2);
          this.state = 1035;
          this.match(JavaScriptParser.NullLiteral);
          break;
        case 63:
          this.enterOuterAlt(localctx, 3);
          this.state = 1036;
          this.match(JavaScriptParser.BooleanLiteral);
          break;
        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  keyword() {
    let localctx = new KeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, JavaScriptParser.RULE_keyword);
    try {
      this.state = 1087;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 73:
          this.enterOuterAlt(localctx, 1);
          this.state = 1039;
          this.match(JavaScriptParser.Break);
          break;
        case 74:
          this.enterOuterAlt(localctx, 2);
          this.state = 1040;
          this.match(JavaScriptParser.Do);
          break;
        case 75:
          this.enterOuterAlt(localctx, 3);
          this.state = 1041;
          this.match(JavaScriptParser.Instanceof);
          break;
        case 76:
          this.enterOuterAlt(localctx, 4);
          this.state = 1042;
          this.match(JavaScriptParser.Typeof);
          break;
        case 77:
          this.enterOuterAlt(localctx, 5);
          this.state = 1043;
          this.match(JavaScriptParser.Case);
          break;
        case 78:
          this.enterOuterAlt(localctx, 6);
          this.state = 1044;
          this.match(JavaScriptParser.Else);
          break;
        case 79:
          this.enterOuterAlt(localctx, 7);
          this.state = 1045;
          this.match(JavaScriptParser.New);
          break;
        case 80:
          this.enterOuterAlt(localctx, 8);
          this.state = 1046;
          this.match(JavaScriptParser.Var);
          break;
        case 81:
          this.enterOuterAlt(localctx, 9);
          this.state = 1047;
          this.match(JavaScriptParser.Catch);
          break;
        case 82:
          this.enterOuterAlt(localctx, 10);
          this.state = 1048;
          this.match(JavaScriptParser.Finally);
          break;
        case 83:
          this.enterOuterAlt(localctx, 11);
          this.state = 1049;
          this.match(JavaScriptParser.Return);
          break;
        case 84:
          this.enterOuterAlt(localctx, 12);
          this.state = 1050;
          this.match(JavaScriptParser.Void);
          break;
        case 85:
          this.enterOuterAlt(localctx, 13);
          this.state = 1051;
          this.match(JavaScriptParser.Continue);
          break;
        case 86:
          this.enterOuterAlt(localctx, 14);
          this.state = 1052;
          this.match(JavaScriptParser.For);
          break;
        case 87:
          this.enterOuterAlt(localctx, 15);
          this.state = 1053;
          this.match(JavaScriptParser.Switch);
          break;
        case 88:
          this.enterOuterAlt(localctx, 16);
          this.state = 1054;
          this.match(JavaScriptParser.While);
          break;
        case 89:
          this.enterOuterAlt(localctx, 17);
          this.state = 1055;
          this.match(JavaScriptParser.Debugger);
          break;
        case 90:
          this.enterOuterAlt(localctx, 18);
          this.state = 1056;
          this.match(JavaScriptParser.Function_);
          break;
        case 91:
          this.enterOuterAlt(localctx, 19);
          this.state = 1057;
          this.match(JavaScriptParser.This);
          break;
        case 92:
          this.enterOuterAlt(localctx, 20);
          this.state = 1058;
          this.match(JavaScriptParser.With);
          break;
        case 93:
          this.enterOuterAlt(localctx, 21);
          this.state = 1059;
          this.match(JavaScriptParser.Default);
          break;
        case 94:
          this.enterOuterAlt(localctx, 22);
          this.state = 1060;
          this.match(JavaScriptParser.If);
          break;
        case 95:
          this.enterOuterAlt(localctx, 23);
          this.state = 1061;
          this.match(JavaScriptParser.Throw);
          break;
        case 96:
          this.enterOuterAlt(localctx, 24);
          this.state = 1062;
          this.match(JavaScriptParser.Delete);
          break;
        case 97:
          this.enterOuterAlt(localctx, 25);
          this.state = 1063;
          this.match(JavaScriptParser.In);
          break;
        case 98:
          this.enterOuterAlt(localctx, 26);
          this.state = 1064;
          this.match(JavaScriptParser.Try);
          break;
        case 104:
          this.enterOuterAlt(localctx, 27);
          this.state = 1065;
          this.match(JavaScriptParser.Class);
          break;
        case 105:
          this.enterOuterAlt(localctx, 28);
          this.state = 1066;
          this.match(JavaScriptParser.Enum);
          break;
        case 106:
          this.enterOuterAlt(localctx, 29);
          this.state = 1067;
          this.match(JavaScriptParser.Extends);
          break;
        case 107:
          this.enterOuterAlt(localctx, 30);
          this.state = 1068;
          this.match(JavaScriptParser.Super);
          break;
        case 108:
          this.enterOuterAlt(localctx, 31);
          this.state = 1069;
          this.match(JavaScriptParser.Const);
          break;
        case 109:
          this.enterOuterAlt(localctx, 32);
          this.state = 1070;
          this.match(JavaScriptParser.Export);
          break;
        case 110:
          this.enterOuterAlt(localctx, 33);
          this.state = 1071;
          this.match(JavaScriptParser.Import);
          break;
        case 113:
          this.enterOuterAlt(localctx, 34);
          this.state = 1072;
          this.match(JavaScriptParser.Implements);
          break;
        case 114:
        case 115:
          this.enterOuterAlt(localctx, 35);
          this.state = 1073;
          this.let_();
          break;
        case 116:
          this.enterOuterAlt(localctx, 36);
          this.state = 1074;
          this.match(JavaScriptParser.Private);
          break;
        case 117:
          this.enterOuterAlt(localctx, 37);
          this.state = 1075;
          this.match(JavaScriptParser.Public);
          break;
        case 118:
          this.enterOuterAlt(localctx, 38);
          this.state = 1076;
          this.match(JavaScriptParser.Interface);
          break;
        case 119:
          this.enterOuterAlt(localctx, 39);
          this.state = 1077;
          this.match(JavaScriptParser.Package);
          break;
        case 120:
          this.enterOuterAlt(localctx, 40);
          this.state = 1078;
          this.match(JavaScriptParser.Protected);
          break;
        case 121:
          this.enterOuterAlt(localctx, 41);
          this.state = 1079;
          this.match(JavaScriptParser.Static);
          break;
        case 102:
          this.enterOuterAlt(localctx, 42);
          this.state = 1080;
          this.match(JavaScriptParser.Yield);
          break;
        case 103:
          this.enterOuterAlt(localctx, 43);
          this.state = 1081;
          this.match(JavaScriptParser.YieldStar);
          break;
        case 111:
          this.enterOuterAlt(localctx, 44);
          this.state = 1082;
          this.match(JavaScriptParser.Async);
          break;
        case 112:
          this.enterOuterAlt(localctx, 45);
          this.state = 1083;
          this.match(JavaScriptParser.Await);
          break;
        case 100:
          this.enterOuterAlt(localctx, 46);
          this.state = 1084;
          this.match(JavaScriptParser.From);
          break;
        case 99:
          this.enterOuterAlt(localctx, 47);
          this.state = 1085;
          this.match(JavaScriptParser.As);
          break;
        case 101:
          this.enterOuterAlt(localctx, 48);
          this.state = 1086;
          this.match(JavaScriptParser.Of);
          break;
        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  let_() {
    let localctx = new Let_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 168, JavaScriptParser.RULE_let_);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1089;
      _la = this._input.LA(1);
      if (!(_la === 114 || _la === 115)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  eos() {
    let localctx = new EosContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, JavaScriptParser.RULE_eos);
    try {
      this.state = 1095;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 118, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1091;
          this.match(JavaScriptParser.SemiColon);
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1092;
          this.match(JavaScriptParser.EOF);
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1093;
          if (!this.lineTerminatorAhead()) {
            throw new _antlr.default.error.FailedPredicateException(this, "this.lineTerminatorAhead()");
          }
          break;
        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 1094;
          if (!this.closeBrace()) {
            throw new _antlr.default.error.FailedPredicateException(this, "this.closeBrace()");
          }
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
}
exports.default = JavaScriptParser;
JavaScriptParser.EOF = _antlr.default.Token.EOF;
JavaScriptParser.HashBangLine = 1;
JavaScriptParser.MultiLineComment = 2;
JavaScriptParser.SingleLineComment = 3;
JavaScriptParser.RegularExpressionLiteral = 4;
JavaScriptParser.OpenBracket = 5;
JavaScriptParser.CloseBracket = 6;
JavaScriptParser.OpenParen = 7;
JavaScriptParser.CloseParen = 8;
JavaScriptParser.OpenBrace = 9;
JavaScriptParser.TemplateCloseBrace = 10;
JavaScriptParser.CloseBrace = 11;
JavaScriptParser.SemiColon = 12;
JavaScriptParser.Comma = 13;
JavaScriptParser.Assign = 14;
JavaScriptParser.QuestionMark = 15;
JavaScriptParser.QuestionMarkDot = 16;
JavaScriptParser.Colon = 17;
JavaScriptParser.Ellipsis = 18;
JavaScriptParser.Dot = 19;
JavaScriptParser.PlusPlus = 20;
JavaScriptParser.MinusMinus = 21;
JavaScriptParser.Plus = 22;
JavaScriptParser.Minus = 23;
JavaScriptParser.BitNot = 24;
JavaScriptParser.Not = 25;
JavaScriptParser.Multiply = 26;
JavaScriptParser.Divide = 27;
JavaScriptParser.Modulus = 28;
JavaScriptParser.Power = 29;
JavaScriptParser.NullCoalesce = 30;
JavaScriptParser.Hashtag = 31;
JavaScriptParser.RightShiftArithmetic = 32;
JavaScriptParser.LeftShiftArithmetic = 33;
JavaScriptParser.RightShiftLogical = 34;
JavaScriptParser.LessThan = 35;
JavaScriptParser.MoreThan = 36;
JavaScriptParser.LessThanEquals = 37;
JavaScriptParser.GreaterThanEquals = 38;
JavaScriptParser.Equals_ = 39;
JavaScriptParser.NotEquals = 40;
JavaScriptParser.IdentityEquals = 41;
JavaScriptParser.IdentityNotEquals = 42;
JavaScriptParser.BitAnd = 43;
JavaScriptParser.BitXOr = 44;
JavaScriptParser.BitOr = 45;
JavaScriptParser.And = 46;
JavaScriptParser.Or = 47;
JavaScriptParser.MultiplyAssign = 48;
JavaScriptParser.DivideAssign = 49;
JavaScriptParser.ModulusAssign = 50;
JavaScriptParser.PlusAssign = 51;
JavaScriptParser.MinusAssign = 52;
JavaScriptParser.LeftShiftArithmeticAssign = 53;
JavaScriptParser.RightShiftArithmeticAssign = 54;
JavaScriptParser.RightShiftLogicalAssign = 55;
JavaScriptParser.BitAndAssign = 56;
JavaScriptParser.BitXorAssign = 57;
JavaScriptParser.BitOrAssign = 58;
JavaScriptParser.PowerAssign = 59;
JavaScriptParser.NullishCoalescingAssign = 60;
JavaScriptParser.ARROW = 61;
JavaScriptParser.NullLiteral = 62;
JavaScriptParser.BooleanLiteral = 63;
JavaScriptParser.DecimalLiteral = 64;
JavaScriptParser.HexIntegerLiteral = 65;
JavaScriptParser.OctalIntegerLiteral = 66;
JavaScriptParser.OctalIntegerLiteral2 = 67;
JavaScriptParser.BinaryIntegerLiteral = 68;
JavaScriptParser.BigHexIntegerLiteral = 69;
JavaScriptParser.BigOctalIntegerLiteral = 70;
JavaScriptParser.BigBinaryIntegerLiteral = 71;
JavaScriptParser.BigDecimalIntegerLiteral = 72;
JavaScriptParser.Break = 73;
JavaScriptParser.Do = 74;
JavaScriptParser.Instanceof = 75;
JavaScriptParser.Typeof = 76;
JavaScriptParser.Case = 77;
JavaScriptParser.Else = 78;
JavaScriptParser.New = 79;
JavaScriptParser.Var = 80;
JavaScriptParser.Catch = 81;
JavaScriptParser.Finally = 82;
JavaScriptParser.Return = 83;
JavaScriptParser.Void = 84;
JavaScriptParser.Continue = 85;
JavaScriptParser.For = 86;
JavaScriptParser.Switch = 87;
JavaScriptParser.While = 88;
JavaScriptParser.Debugger = 89;
JavaScriptParser.Function_ = 90;
JavaScriptParser.This = 91;
JavaScriptParser.With = 92;
JavaScriptParser.Default = 93;
JavaScriptParser.If = 94;
JavaScriptParser.Throw = 95;
JavaScriptParser.Delete = 96;
JavaScriptParser.In = 97;
JavaScriptParser.Try = 98;
JavaScriptParser.As = 99;
JavaScriptParser.From = 100;
JavaScriptParser.Of = 101;
JavaScriptParser.Yield = 102;
JavaScriptParser.YieldStar = 103;
JavaScriptParser.Class = 104;
JavaScriptParser.Enum = 105;
JavaScriptParser.Extends = 106;
JavaScriptParser.Super = 107;
JavaScriptParser.Const = 108;
JavaScriptParser.Export = 109;
JavaScriptParser.Import = 110;
JavaScriptParser.Async = 111;
JavaScriptParser.Await = 112;
JavaScriptParser.Implements = 113;
JavaScriptParser.StrictLet = 114;
JavaScriptParser.NonStrictLet = 115;
JavaScriptParser.Private = 116;
JavaScriptParser.Public = 117;
JavaScriptParser.Interface = 118;
JavaScriptParser.Package = 119;
JavaScriptParser.Protected = 120;
JavaScriptParser.Static = 121;
JavaScriptParser.Identifier = 122;
JavaScriptParser.StringLiteral = 123;
JavaScriptParser.BackTick = 124;
JavaScriptParser.WhiteSpaces = 125;
JavaScriptParser.LineTerminator = 126;
JavaScriptParser.HtmlComment = 127;
JavaScriptParser.CDataComment = 128;
JavaScriptParser.UnexpectedCharacter = 129;
JavaScriptParser.TemplateStringStartExpression = 130;
JavaScriptParser.TemplateStringAtom = 131;
JavaScriptParser.RULE_program = 0;
JavaScriptParser.RULE_sourceElement = 1;
JavaScriptParser.RULE_statement = 2;
JavaScriptParser.RULE_block = 3;
JavaScriptParser.RULE_statementList = 4;
JavaScriptParser.RULE_importStatement = 5;
JavaScriptParser.RULE_importFromBlock = 6;
JavaScriptParser.RULE_importModuleItems = 7;
JavaScriptParser.RULE_importAliasName = 8;
JavaScriptParser.RULE_moduleExportName = 9;
JavaScriptParser.RULE_importedBinding = 10;
JavaScriptParser.RULE_importDefault = 11;
JavaScriptParser.RULE_importNamespace = 12;
JavaScriptParser.RULE_importFrom = 13;
JavaScriptParser.RULE_aliasName = 14;
JavaScriptParser.RULE_exportStatement = 15;
JavaScriptParser.RULE_exportFromBlock = 16;
JavaScriptParser.RULE_exportModuleItems = 17;
JavaScriptParser.RULE_exportAliasName = 18;
JavaScriptParser.RULE_declaration = 19;
JavaScriptParser.RULE_variableStatement = 20;
JavaScriptParser.RULE_variableDeclarationList = 21;
JavaScriptParser.RULE_variableDeclaration = 22;
JavaScriptParser.RULE_emptyStatement_ = 23;
JavaScriptParser.RULE_expressionStatement = 24;
JavaScriptParser.RULE_ifStatement = 25;
JavaScriptParser.RULE_iterationStatement = 26;
JavaScriptParser.RULE_varModifier = 27;
JavaScriptParser.RULE_continueStatement = 28;
JavaScriptParser.RULE_breakStatement = 29;
JavaScriptParser.RULE_returnStatement = 30;
JavaScriptParser.RULE_yieldStatement = 31;
JavaScriptParser.RULE_withStatement = 32;
JavaScriptParser.RULE_switchStatement = 33;
JavaScriptParser.RULE_caseBlock = 34;
JavaScriptParser.RULE_caseClauses = 35;
JavaScriptParser.RULE_caseClause = 36;
JavaScriptParser.RULE_defaultClause = 37;
JavaScriptParser.RULE_labelledStatement = 38;
JavaScriptParser.RULE_throwStatement = 39;
JavaScriptParser.RULE_tryStatement = 40;
JavaScriptParser.RULE_catchProduction = 41;
JavaScriptParser.RULE_finallyProduction = 42;
JavaScriptParser.RULE_debuggerStatement = 43;
JavaScriptParser.RULE_functionDeclaration = 44;
JavaScriptParser.RULE_classDeclaration = 45;
JavaScriptParser.RULE_classTail = 46;
JavaScriptParser.RULE_classElement = 47;
JavaScriptParser.RULE_methodDefinition = 48;
JavaScriptParser.RULE_fieldDefinition = 49;
JavaScriptParser.RULE_classElementName = 50;
JavaScriptParser.RULE_privateIdentifier = 51;
JavaScriptParser.RULE_formalParameterList = 52;
JavaScriptParser.RULE_formalParameterArg = 53;
JavaScriptParser.RULE_lastFormalParameterArg = 54;
JavaScriptParser.RULE_functionBody = 55;
JavaScriptParser.RULE_sourceElements = 56;
JavaScriptParser.RULE_arrayLiteral = 57;
JavaScriptParser.RULE_elementList = 58;
JavaScriptParser.RULE_arrayElement = 59;
JavaScriptParser.RULE_propertyAssignment = 60;
JavaScriptParser.RULE_propertyName = 61;
JavaScriptParser.RULE_arguments = 62;
JavaScriptParser.RULE_argument = 63;
JavaScriptParser.RULE_expressionSequence = 64;
JavaScriptParser.RULE_singleExpression = 65;
JavaScriptParser.RULE_initializer = 66;
JavaScriptParser.RULE_assignable = 67;
JavaScriptParser.RULE_objectLiteral = 68;
JavaScriptParser.RULE_anonymousFunction = 69;
JavaScriptParser.RULE_arrowFunctionParameters = 70;
JavaScriptParser.RULE_arrowFunctionBody = 71;
JavaScriptParser.RULE_assignmentOperator = 72;
JavaScriptParser.RULE_literal = 73;
JavaScriptParser.RULE_templateStringLiteral = 74;
JavaScriptParser.RULE_templateStringAtom = 75;
JavaScriptParser.RULE_numericLiteral = 76;
JavaScriptParser.RULE_bigintLiteral = 77;
JavaScriptParser.RULE_getter = 78;
JavaScriptParser.RULE_setter = 79;
JavaScriptParser.RULE_identifierName = 80;
JavaScriptParser.RULE_identifier = 81;
JavaScriptParser.RULE_reservedWord = 82;
JavaScriptParser.RULE_keyword = 83;
JavaScriptParser.RULE_let_ = 84;
JavaScriptParser.RULE_eos = 85;
class ProgramContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_program;
  }
  EOF() {
    return this.getToken(JavaScriptParser.EOF, 0);
  }
  HashBangLine() {
    return this.getToken(JavaScriptParser.HashBangLine, 0);
  }
  sourceElements() {
    return this.getTypedRuleContext(SourceElementsContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterProgram(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitProgram(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitProgram(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class SourceElementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_sourceElement;
  }
  statement() {
    return this.getTypedRuleContext(StatementContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterSourceElement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitSourceElement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitSourceElement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class StatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_statement;
  }
  block() {
    return this.getTypedRuleContext(BlockContext, 0);
  }
  variableStatement() {
    return this.getTypedRuleContext(VariableStatementContext, 0);
  }
  importStatement() {
    return this.getTypedRuleContext(ImportStatementContext, 0);
  }
  exportStatement() {
    return this.getTypedRuleContext(ExportStatementContext, 0);
  }
  emptyStatement_() {
    return this.getTypedRuleContext(EmptyStatement_Context, 0);
  }
  classDeclaration() {
    return this.getTypedRuleContext(ClassDeclarationContext, 0);
  }
  functionDeclaration() {
    return this.getTypedRuleContext(FunctionDeclarationContext, 0);
  }
  expressionStatement() {
    return this.getTypedRuleContext(ExpressionStatementContext, 0);
  }
  ifStatement() {
    return this.getTypedRuleContext(IfStatementContext, 0);
  }
  iterationStatement() {
    return this.getTypedRuleContext(IterationStatementContext, 0);
  }
  continueStatement() {
    return this.getTypedRuleContext(ContinueStatementContext, 0);
  }
  breakStatement() {
    return this.getTypedRuleContext(BreakStatementContext, 0);
  }
  returnStatement() {
    return this.getTypedRuleContext(ReturnStatementContext, 0);
  }
  yieldStatement() {
    return this.getTypedRuleContext(YieldStatementContext, 0);
  }
  withStatement() {
    return this.getTypedRuleContext(WithStatementContext, 0);
  }
  labelledStatement() {
    return this.getTypedRuleContext(LabelledStatementContext, 0);
  }
  switchStatement() {
    return this.getTypedRuleContext(SwitchStatementContext, 0);
  }
  throwStatement() {
    return this.getTypedRuleContext(ThrowStatementContext, 0);
  }
  tryStatement() {
    return this.getTypedRuleContext(TryStatementContext, 0);
  }
  debuggerStatement() {
    return this.getTypedRuleContext(DebuggerStatementContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class BlockContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_block;
  }
  OpenBrace() {
    return this.getToken(JavaScriptParser.OpenBrace, 0);
  }
  CloseBrace() {
    return this.getToken(JavaScriptParser.CloseBrace, 0);
  }
  statementList() {
    return this.getTypedRuleContext(StatementListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterBlock(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitBlock(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitBlock(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class StatementListContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_statementList;
  }
  statement = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(StatementContext);
    } else {
      return this.getTypedRuleContext(StatementContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterStatementList(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitStatementList(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitStatementList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ImportStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_importStatement;
  }
  Import() {
    return this.getToken(JavaScriptParser.Import, 0);
  }
  importFromBlock() {
    return this.getTypedRuleContext(ImportFromBlockContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterImportStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitImportStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitImportStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ImportFromBlockContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_importFromBlock;
  }
  importFrom() {
    return this.getTypedRuleContext(ImportFromContext, 0);
  }
  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }
  importNamespace() {
    return this.getTypedRuleContext(ImportNamespaceContext, 0);
  }
  importModuleItems() {
    return this.getTypedRuleContext(ImportModuleItemsContext, 0);
  }
  importDefault() {
    return this.getTypedRuleContext(ImportDefaultContext, 0);
  }
  StringLiteral() {
    return this.getToken(JavaScriptParser.StringLiteral, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterImportFromBlock(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitImportFromBlock(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitImportFromBlock(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ImportModuleItemsContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_importModuleItems;
  }
  OpenBrace() {
    return this.getToken(JavaScriptParser.OpenBrace, 0);
  }
  CloseBrace() {
    return this.getToken(JavaScriptParser.CloseBrace, 0);
  }
  importAliasName = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ImportAliasNameContext);
    } else {
      return this.getTypedRuleContext(ImportAliasNameContext, i);
    }
  };
  Comma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaScriptParser.Comma);
    } else {
      return this.getToken(JavaScriptParser.Comma, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterImportModuleItems(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitImportModuleItems(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitImportModuleItems(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ImportAliasNameContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_importAliasName;
  }
  moduleExportName() {
    return this.getTypedRuleContext(ModuleExportNameContext, 0);
  }
  As() {
    return this.getToken(JavaScriptParser.As, 0);
  }
  importedBinding() {
    return this.getTypedRuleContext(ImportedBindingContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterImportAliasName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitImportAliasName(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitImportAliasName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ModuleExportNameContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_moduleExportName;
  }
  identifierName() {
    return this.getTypedRuleContext(IdentifierNameContext, 0);
  }
  StringLiteral() {
    return this.getToken(JavaScriptParser.StringLiteral, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterModuleExportName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitModuleExportName(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitModuleExportName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ImportedBindingContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_importedBinding;
  }
  Identifier() {
    return this.getToken(JavaScriptParser.Identifier, 0);
  }
  Yield() {
    return this.getToken(JavaScriptParser.Yield, 0);
  }
  Await() {
    return this.getToken(JavaScriptParser.Await, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterImportedBinding(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitImportedBinding(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitImportedBinding(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ImportDefaultContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_importDefault;
  }
  aliasName() {
    return this.getTypedRuleContext(AliasNameContext, 0);
  }
  Comma() {
    return this.getToken(JavaScriptParser.Comma, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterImportDefault(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitImportDefault(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitImportDefault(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ImportNamespaceContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_importNamespace;
  }
  Multiply() {
    return this.getToken(JavaScriptParser.Multiply, 0);
  }
  identifierName = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierNameContext);
    } else {
      return this.getTypedRuleContext(IdentifierNameContext, i);
    }
  };
  As() {
    return this.getToken(JavaScriptParser.As, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterImportNamespace(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitImportNamespace(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitImportNamespace(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ImportFromContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_importFrom;
  }
  From() {
    return this.getToken(JavaScriptParser.From, 0);
  }
  StringLiteral() {
    return this.getToken(JavaScriptParser.StringLiteral, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterImportFrom(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitImportFrom(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitImportFrom(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AliasNameContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_aliasName;
  }
  identifierName = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierNameContext);
    } else {
      return this.getTypedRuleContext(IdentifierNameContext, i);
    }
  };
  As() {
    return this.getToken(JavaScriptParser.As, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterAliasName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitAliasName(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitAliasName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ExportStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_exportStatement;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
class ExportDefaultDeclarationContext extends ExportStatementContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  Export() {
    return this.getToken(JavaScriptParser.Export, 0);
  }
  Default() {
    return this.getToken(JavaScriptParser.Default, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterExportDefaultDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitExportDefaultDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitExportDefaultDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.ExportDefaultDeclarationContext = ExportDefaultDeclarationContext;
class ExportDeclarationContext extends ExportStatementContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  Export() {
    return this.getToken(JavaScriptParser.Export, 0);
  }
  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }
  exportFromBlock() {
    return this.getTypedRuleContext(ExportFromBlockContext, 0);
  }
  declaration() {
    return this.getTypedRuleContext(DeclarationContext, 0);
  }
  Default() {
    return this.getToken(JavaScriptParser.Default, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterExportDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitExportDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitExportDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.ExportDeclarationContext = ExportDeclarationContext;
class ExportFromBlockContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_exportFromBlock;
  }
  importNamespace() {
    return this.getTypedRuleContext(ImportNamespaceContext, 0);
  }
  importFrom() {
    return this.getTypedRuleContext(ImportFromContext, 0);
  }
  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }
  exportModuleItems() {
    return this.getTypedRuleContext(ExportModuleItemsContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterExportFromBlock(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitExportFromBlock(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitExportFromBlock(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ExportModuleItemsContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_exportModuleItems;
  }
  OpenBrace() {
    return this.getToken(JavaScriptParser.OpenBrace, 0);
  }
  CloseBrace() {
    return this.getToken(JavaScriptParser.CloseBrace, 0);
  }
  exportAliasName = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExportAliasNameContext);
    } else {
      return this.getTypedRuleContext(ExportAliasNameContext, i);
    }
  };
  Comma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaScriptParser.Comma);
    } else {
      return this.getToken(JavaScriptParser.Comma, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterExportModuleItems(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitExportModuleItems(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitExportModuleItems(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ExportAliasNameContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_exportAliasName;
  }
  moduleExportName = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ModuleExportNameContext);
    } else {
      return this.getTypedRuleContext(ModuleExportNameContext, i);
    }
  };
  As() {
    return this.getToken(JavaScriptParser.As, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterExportAliasName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitExportAliasName(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitExportAliasName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class DeclarationContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_declaration;
  }
  variableStatement() {
    return this.getTypedRuleContext(VariableStatementContext, 0);
  }
  classDeclaration() {
    return this.getTypedRuleContext(ClassDeclarationContext, 0);
  }
  functionDeclaration() {
    return this.getTypedRuleContext(FunctionDeclarationContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class VariableStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_variableStatement;
  }
  variableDeclarationList() {
    return this.getTypedRuleContext(VariableDeclarationListContext, 0);
  }
  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterVariableStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitVariableStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitVariableStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class VariableDeclarationListContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_variableDeclarationList;
  }
  varModifier() {
    return this.getTypedRuleContext(VarModifierContext, 0);
  }
  variableDeclaration = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(VariableDeclarationContext);
    } else {
      return this.getTypedRuleContext(VariableDeclarationContext, i);
    }
  };
  Comma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaScriptParser.Comma);
    } else {
      return this.getToken(JavaScriptParser.Comma, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterVariableDeclarationList(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitVariableDeclarationList(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitVariableDeclarationList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class VariableDeclarationContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_variableDeclaration;
  }
  assignable() {
    return this.getTypedRuleContext(AssignableContext, 0);
  }
  Assign() {
    return this.getToken(JavaScriptParser.Assign, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterVariableDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitVariableDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitVariableDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class EmptyStatement_Context extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_emptyStatement_;
  }
  SemiColon() {
    return this.getToken(JavaScriptParser.SemiColon, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterEmptyStatement_(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitEmptyStatement_(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitEmptyStatement_(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ExpressionStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_expressionStatement;
  }
  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }
  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterExpressionStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitExpressionStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitExpressionStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class IfStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_ifStatement;
  }
  If() {
    return this.getToken(JavaScriptParser.If, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  statement = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(StatementContext);
    } else {
      return this.getTypedRuleContext(StatementContext, i);
    }
  };
  Else() {
    return this.getToken(JavaScriptParser.Else, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterIfStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitIfStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitIfStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class IterationStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_iterationStatement;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
class DoStatementContext extends IterationStatementContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  Do() {
    return this.getToken(JavaScriptParser.Do, 0);
  }
  statement() {
    return this.getTypedRuleContext(StatementContext, 0);
  }
  While() {
    return this.getToken(JavaScriptParser.While, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterDoStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitDoStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitDoStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.DoStatementContext = DoStatementContext;
class WhileStatementContext extends IterationStatementContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  While() {
    return this.getToken(JavaScriptParser.While, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  statement() {
    return this.getTypedRuleContext(StatementContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterWhileStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitWhileStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitWhileStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.WhileStatementContext = WhileStatementContext;
class ForStatementContext extends IterationStatementContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  For() {
    return this.getToken(JavaScriptParser.For, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  SemiColon = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaScriptParser.SemiColon);
    } else {
      return this.getToken(JavaScriptParser.SemiColon, i);
    }
  };
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  statement() {
    return this.getTypedRuleContext(StatementContext, 0);
  }
  expressionSequence = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionSequenceContext);
    } else {
      return this.getTypedRuleContext(ExpressionSequenceContext, i);
    }
  };
  variableDeclarationList() {
    return this.getTypedRuleContext(VariableDeclarationListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterForStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitForStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitForStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.ForStatementContext = ForStatementContext;
class ForInStatementContext extends IterationStatementContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  For() {
    return this.getToken(JavaScriptParser.For, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  In() {
    return this.getToken(JavaScriptParser.In, 0);
  }
  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  statement() {
    return this.getTypedRuleContext(StatementContext, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  variableDeclarationList() {
    return this.getTypedRuleContext(VariableDeclarationListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterForInStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitForInStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitForInStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.ForInStatementContext = ForInStatementContext;
class ForOfStatementContext extends IterationStatementContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  For() {
    return this.getToken(JavaScriptParser.For, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  Of() {
    return this.getToken(JavaScriptParser.Of, 0);
  }
  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  statement() {
    return this.getTypedRuleContext(StatementContext, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  variableDeclarationList() {
    return this.getTypedRuleContext(VariableDeclarationListContext, 0);
  }
  Await() {
    return this.getToken(JavaScriptParser.Await, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterForOfStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitForOfStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitForOfStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.ForOfStatementContext = ForOfStatementContext;
class VarModifierContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_varModifier;
  }
  Var() {
    return this.getToken(JavaScriptParser.Var, 0);
  }
  let_() {
    return this.getTypedRuleContext(Let_Context, 0);
  }
  Const() {
    return this.getToken(JavaScriptParser.Const, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterVarModifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitVarModifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitVarModifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ContinueStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_continueStatement;
  }
  Continue() {
    return this.getToken(JavaScriptParser.Continue, 0);
  }
  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterContinueStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitContinueStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitContinueStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class BreakStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_breakStatement;
  }
  Break() {
    return this.getToken(JavaScriptParser.Break, 0);
  }
  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterBreakStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitBreakStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitBreakStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ReturnStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_returnStatement;
  }
  Return() {
    return this.getToken(JavaScriptParser.Return, 0);
  }
  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }
  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterReturnStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitReturnStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitReturnStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class YieldStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_yieldStatement;
  }
  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }
  Yield() {
    return this.getToken(JavaScriptParser.Yield, 0);
  }
  YieldStar() {
    return this.getToken(JavaScriptParser.YieldStar, 0);
  }
  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterYieldStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitYieldStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitYieldStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class WithStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_withStatement;
  }
  With() {
    return this.getToken(JavaScriptParser.With, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  statement() {
    return this.getTypedRuleContext(StatementContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterWithStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitWithStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitWithStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class SwitchStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_switchStatement;
  }
  Switch() {
    return this.getToken(JavaScriptParser.Switch, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  caseBlock() {
    return this.getTypedRuleContext(CaseBlockContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterSwitchStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitSwitchStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitSwitchStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class CaseBlockContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_caseBlock;
  }
  OpenBrace() {
    return this.getToken(JavaScriptParser.OpenBrace, 0);
  }
  CloseBrace() {
    return this.getToken(JavaScriptParser.CloseBrace, 0);
  }
  caseClauses = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(CaseClausesContext);
    } else {
      return this.getTypedRuleContext(CaseClausesContext, i);
    }
  };
  defaultClause() {
    return this.getTypedRuleContext(DefaultClauseContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterCaseBlock(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitCaseBlock(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitCaseBlock(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class CaseClausesContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_caseClauses;
  }
  caseClause = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(CaseClauseContext);
    } else {
      return this.getTypedRuleContext(CaseClauseContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterCaseClauses(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitCaseClauses(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitCaseClauses(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class CaseClauseContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_caseClause;
  }
  Case() {
    return this.getToken(JavaScriptParser.Case, 0);
  }
  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }
  Colon() {
    return this.getToken(JavaScriptParser.Colon, 0);
  }
  statementList() {
    return this.getTypedRuleContext(StatementListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterCaseClause(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitCaseClause(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitCaseClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class DefaultClauseContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_defaultClause;
  }
  Default() {
    return this.getToken(JavaScriptParser.Default, 0);
  }
  Colon() {
    return this.getToken(JavaScriptParser.Colon, 0);
  }
  statementList() {
    return this.getTypedRuleContext(StatementListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterDefaultClause(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitDefaultClause(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitDefaultClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class LabelledStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_labelledStatement;
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  Colon() {
    return this.getToken(JavaScriptParser.Colon, 0);
  }
  statement() {
    return this.getTypedRuleContext(StatementContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterLabelledStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitLabelledStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitLabelledStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ThrowStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_throwStatement;
  }
  Throw() {
    return this.getToken(JavaScriptParser.Throw, 0);
  }
  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }
  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterThrowStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitThrowStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitThrowStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TryStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_tryStatement;
  }
  Try() {
    return this.getToken(JavaScriptParser.Try, 0);
  }
  block() {
    return this.getTypedRuleContext(BlockContext, 0);
  }
  catchProduction() {
    return this.getTypedRuleContext(CatchProductionContext, 0);
  }
  finallyProduction() {
    return this.getTypedRuleContext(FinallyProductionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterTryStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitTryStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitTryStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class CatchProductionContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_catchProduction;
  }
  Catch() {
    return this.getToken(JavaScriptParser.Catch, 0);
  }
  block() {
    return this.getTypedRuleContext(BlockContext, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  assignable() {
    return this.getTypedRuleContext(AssignableContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterCatchProduction(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitCatchProduction(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitCatchProduction(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class FinallyProductionContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_finallyProduction;
  }
  Finally() {
    return this.getToken(JavaScriptParser.Finally, 0);
  }
  block() {
    return this.getTypedRuleContext(BlockContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterFinallyProduction(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitFinallyProduction(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitFinallyProduction(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class DebuggerStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_debuggerStatement;
  }
  Debugger() {
    return this.getToken(JavaScriptParser.Debugger, 0);
  }
  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterDebuggerStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitDebuggerStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitDebuggerStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class FunctionDeclarationContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_functionDeclaration;
  }
  Function_() {
    return this.getToken(JavaScriptParser.Function_, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  functionBody() {
    return this.getTypedRuleContext(FunctionBodyContext, 0);
  }
  Async() {
    return this.getToken(JavaScriptParser.Async, 0);
  }
  Multiply() {
    return this.getToken(JavaScriptParser.Multiply, 0);
  }
  formalParameterList() {
    return this.getTypedRuleContext(FormalParameterListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterFunctionDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitFunctionDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitFunctionDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ClassDeclarationContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_classDeclaration;
  }
  Class() {
    return this.getToken(JavaScriptParser.Class, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  classTail() {
    return this.getTypedRuleContext(ClassTailContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterClassDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitClassDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitClassDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ClassTailContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_classTail;
  }
  OpenBrace() {
    return this.getToken(JavaScriptParser.OpenBrace, 0);
  }
  CloseBrace() {
    return this.getToken(JavaScriptParser.CloseBrace, 0);
  }
  Extends() {
    return this.getToken(JavaScriptParser.Extends, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  classElement = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ClassElementContext);
    } else {
      return this.getTypedRuleContext(ClassElementContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterClassTail(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitClassTail(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitClassTail(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ClassElementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_classElement;
  }
  methodDefinition() {
    return this.getTypedRuleContext(MethodDefinitionContext, 0);
  }
  Static() {
    return this.getToken(JavaScriptParser.Static, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  fieldDefinition() {
    return this.getTypedRuleContext(FieldDefinitionContext, 0);
  }
  block() {
    return this.getTypedRuleContext(BlockContext, 0);
  }
  emptyStatement_() {
    return this.getTypedRuleContext(EmptyStatement_Context, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterClassElement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitClassElement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitClassElement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class MethodDefinitionContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_methodDefinition;
  }
  classElementName() {
    return this.getTypedRuleContext(ClassElementNameContext, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  functionBody() {
    return this.getTypedRuleContext(FunctionBodyContext, 0);
  }
  Async() {
    return this.getToken(JavaScriptParser.Async, 0);
  }
  Multiply() {
    return this.getToken(JavaScriptParser.Multiply, 0);
  }
  formalParameterList() {
    return this.getTypedRuleContext(FormalParameterListContext, 0);
  }
  getter() {
    return this.getTypedRuleContext(GetterContext, 0);
  }
  setter() {
    return this.getTypedRuleContext(SetterContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterMethodDefinition(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitMethodDefinition(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitMethodDefinition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class FieldDefinitionContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_fieldDefinition;
  }
  classElementName() {
    return this.getTypedRuleContext(ClassElementNameContext, 0);
  }
  initializer() {
    return this.getTypedRuleContext(InitializerContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterFieldDefinition(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitFieldDefinition(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitFieldDefinition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ClassElementNameContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_classElementName;
  }
  propertyName() {
    return this.getTypedRuleContext(PropertyNameContext, 0);
  }
  privateIdentifier() {
    return this.getTypedRuleContext(PrivateIdentifierContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterClassElementName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitClassElementName(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitClassElementName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class PrivateIdentifierContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_privateIdentifier;
  }
  Hashtag() {
    return this.getToken(JavaScriptParser.Hashtag, 0);
  }
  identifierName() {
    return this.getTypedRuleContext(IdentifierNameContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterPrivateIdentifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitPrivateIdentifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitPrivateIdentifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class FormalParameterListContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_formalParameterList;
  }
  formalParameterArg = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(FormalParameterArgContext);
    } else {
      return this.getTypedRuleContext(FormalParameterArgContext, i);
    }
  };
  Comma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaScriptParser.Comma);
    } else {
      return this.getToken(JavaScriptParser.Comma, i);
    }
  };
  lastFormalParameterArg() {
    return this.getTypedRuleContext(LastFormalParameterArgContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterFormalParameterList(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitFormalParameterList(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitFormalParameterList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class FormalParameterArgContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_formalParameterArg;
  }
  assignable() {
    return this.getTypedRuleContext(AssignableContext, 0);
  }
  Assign() {
    return this.getToken(JavaScriptParser.Assign, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterFormalParameterArg(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitFormalParameterArg(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitFormalParameterArg(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class LastFormalParameterArgContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_lastFormalParameterArg;
  }
  Ellipsis() {
    return this.getToken(JavaScriptParser.Ellipsis, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterLastFormalParameterArg(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitLastFormalParameterArg(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitLastFormalParameterArg(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class FunctionBodyContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_functionBody;
  }
  OpenBrace() {
    return this.getToken(JavaScriptParser.OpenBrace, 0);
  }
  CloseBrace() {
    return this.getToken(JavaScriptParser.CloseBrace, 0);
  }
  sourceElements() {
    return this.getTypedRuleContext(SourceElementsContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterFunctionBody(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitFunctionBody(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitFunctionBody(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class SourceElementsContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_sourceElements;
  }
  sourceElement = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SourceElementContext);
    } else {
      return this.getTypedRuleContext(SourceElementContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterSourceElements(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitSourceElements(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitSourceElements(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ArrayLiteralContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_arrayLiteral;
  }
  OpenBracket() {
    return this.getToken(JavaScriptParser.OpenBracket, 0);
  }
  elementList() {
    return this.getTypedRuleContext(ElementListContext, 0);
  }
  CloseBracket() {
    return this.getToken(JavaScriptParser.CloseBracket, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterArrayLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitArrayLiteral(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitArrayLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ElementListContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_elementList;
  }
  Comma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaScriptParser.Comma);
    } else {
      return this.getToken(JavaScriptParser.Comma, i);
    }
  };
  arrayElement = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ArrayElementContext);
    } else {
      return this.getTypedRuleContext(ArrayElementContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterElementList(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitElementList(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitElementList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ArrayElementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_arrayElement;
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  Ellipsis() {
    return this.getToken(JavaScriptParser.Ellipsis, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterArrayElement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitArrayElement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitArrayElement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class PropertyAssignmentContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_propertyAssignment;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
class PropertyExpressionAssignmentContext extends PropertyAssignmentContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  propertyName() {
    return this.getTypedRuleContext(PropertyNameContext, 0);
  }
  Colon() {
    return this.getToken(JavaScriptParser.Colon, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterPropertyExpressionAssignment(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitPropertyExpressionAssignment(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitPropertyExpressionAssignment(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.PropertyExpressionAssignmentContext = PropertyExpressionAssignmentContext;
class ComputedPropertyExpressionAssignmentContext extends PropertyAssignmentContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  OpenBracket() {
    return this.getToken(JavaScriptParser.OpenBracket, 0);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  CloseBracket() {
    return this.getToken(JavaScriptParser.CloseBracket, 0);
  }
  Colon() {
    return this.getToken(JavaScriptParser.Colon, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterComputedPropertyExpressionAssignment(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitComputedPropertyExpressionAssignment(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitComputedPropertyExpressionAssignment(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.ComputedPropertyExpressionAssignmentContext = ComputedPropertyExpressionAssignmentContext;
class PropertyShorthandContext extends PropertyAssignmentContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  Ellipsis() {
    return this.getToken(JavaScriptParser.Ellipsis, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterPropertyShorthand(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitPropertyShorthand(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitPropertyShorthand(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.PropertyShorthandContext = PropertyShorthandContext;
class PropertySetterContext extends PropertyAssignmentContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  setter() {
    return this.getTypedRuleContext(SetterContext, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  formalParameterArg() {
    return this.getTypedRuleContext(FormalParameterArgContext, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  functionBody() {
    return this.getTypedRuleContext(FunctionBodyContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterPropertySetter(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitPropertySetter(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitPropertySetter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.PropertySetterContext = PropertySetterContext;
class PropertyGetterContext extends PropertyAssignmentContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  getter() {
    return this.getTypedRuleContext(GetterContext, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  functionBody() {
    return this.getTypedRuleContext(FunctionBodyContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterPropertyGetter(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitPropertyGetter(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitPropertyGetter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.PropertyGetterContext = PropertyGetterContext;
class FunctionPropertyContext extends PropertyAssignmentContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  propertyName() {
    return this.getTypedRuleContext(PropertyNameContext, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  functionBody() {
    return this.getTypedRuleContext(FunctionBodyContext, 0);
  }
  Async() {
    return this.getToken(JavaScriptParser.Async, 0);
  }
  Multiply() {
    return this.getToken(JavaScriptParser.Multiply, 0);
  }
  formalParameterList() {
    return this.getTypedRuleContext(FormalParameterListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterFunctionProperty(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitFunctionProperty(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitFunctionProperty(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.FunctionPropertyContext = FunctionPropertyContext;
class PropertyNameContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_propertyName;
  }
  identifierName() {
    return this.getTypedRuleContext(IdentifierNameContext, 0);
  }
  StringLiteral() {
    return this.getToken(JavaScriptParser.StringLiteral, 0);
  }
  numericLiteral() {
    return this.getTypedRuleContext(NumericLiteralContext, 0);
  }
  OpenBracket() {
    return this.getToken(JavaScriptParser.OpenBracket, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  CloseBracket() {
    return this.getToken(JavaScriptParser.CloseBracket, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterPropertyName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitPropertyName(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitPropertyName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ArgumentsContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_arguments;
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  argument = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ArgumentContext);
    } else {
      return this.getTypedRuleContext(ArgumentContext, i);
    }
  };
  Comma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaScriptParser.Comma);
    } else {
      return this.getToken(JavaScriptParser.Comma, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterArguments(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitArguments(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitArguments(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ArgumentContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_argument;
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  Ellipsis() {
    return this.getToken(JavaScriptParser.Ellipsis, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterArgument(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitArgument(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitArgument(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ExpressionSequenceContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_expressionSequence;
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  Comma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaScriptParser.Comma);
    } else {
      return this.getToken(JavaScriptParser.Comma, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterExpressionSequence(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitExpressionSequence(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitExpressionSequence(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class SingleExpressionContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_singleExpression;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
class TemplateStringExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  templateStringLiteral() {
    return this.getTypedRuleContext(TemplateStringLiteralContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterTemplateStringExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitTemplateStringExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitTemplateStringExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.TemplateStringExpressionContext = TemplateStringExpressionContext;
class TernaryExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  QuestionMark() {
    return this.getToken(JavaScriptParser.QuestionMark, 0);
  }
  Colon() {
    return this.getToken(JavaScriptParser.Colon, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterTernaryExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitTernaryExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitTernaryExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.TernaryExpressionContext = TernaryExpressionContext;
class LogicalAndExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  And() {
    return this.getToken(JavaScriptParser.And, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterLogicalAndExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitLogicalAndExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitLogicalAndExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.LogicalAndExpressionContext = LogicalAndExpressionContext;
class PowerExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  Power() {
    return this.getToken(JavaScriptParser.Power, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterPowerExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitPowerExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitPowerExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.PowerExpressionContext = PowerExpressionContext;
class PreIncrementExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  PlusPlus() {
    return this.getToken(JavaScriptParser.PlusPlus, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterPreIncrementExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitPreIncrementExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitPreIncrementExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.PreIncrementExpressionContext = PreIncrementExpressionContext;
class ObjectLiteralExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  objectLiteral() {
    return this.getTypedRuleContext(ObjectLiteralContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterObjectLiteralExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitObjectLiteralExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitObjectLiteralExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.ObjectLiteralExpressionContext = ObjectLiteralExpressionContext;
class MetaExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  New() {
    return this.getToken(JavaScriptParser.New, 0);
  }
  Dot() {
    return this.getToken(JavaScriptParser.Dot, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterMetaExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitMetaExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitMetaExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.MetaExpressionContext = MetaExpressionContext;
class InExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  In() {
    return this.getToken(JavaScriptParser.In, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterInExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitInExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitInExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.InExpressionContext = InExpressionContext;
class LogicalOrExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  Or() {
    return this.getToken(JavaScriptParser.Or, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterLogicalOrExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitLogicalOrExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitLogicalOrExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.LogicalOrExpressionContext = LogicalOrExpressionContext;
class OptionalChainExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  QuestionMarkDot() {
    return this.getToken(JavaScriptParser.QuestionMarkDot, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterOptionalChainExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitOptionalChainExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitOptionalChainExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.OptionalChainExpressionContext = OptionalChainExpressionContext;
class NotExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  Not() {
    return this.getToken(JavaScriptParser.Not, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterNotExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitNotExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitNotExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.NotExpressionContext = NotExpressionContext;
class PreDecreaseExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  MinusMinus() {
    return this.getToken(JavaScriptParser.MinusMinus, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterPreDecreaseExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitPreDecreaseExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitPreDecreaseExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.PreDecreaseExpressionContext = PreDecreaseExpressionContext;
class ArgumentsExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  arguments() {
    return this.getTypedRuleContext(ArgumentsContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterArgumentsExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitArgumentsExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitArgumentsExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.ArgumentsExpressionContext = ArgumentsExpressionContext;
class AwaitExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  Await() {
    return this.getToken(JavaScriptParser.Await, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterAwaitExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitAwaitExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitAwaitExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.AwaitExpressionContext = AwaitExpressionContext;
class ThisExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  This() {
    return this.getToken(JavaScriptParser.This, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterThisExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitThisExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitThisExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.ThisExpressionContext = ThisExpressionContext;
class FunctionExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  anonymousFunction() {
    return this.getTypedRuleContext(AnonymousFunctionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterFunctionExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitFunctionExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitFunctionExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.FunctionExpressionContext = FunctionExpressionContext;
class UnaryMinusExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  Minus() {
    return this.getToken(JavaScriptParser.Minus, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterUnaryMinusExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitUnaryMinusExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitUnaryMinusExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.UnaryMinusExpressionContext = UnaryMinusExpressionContext;
class AssignmentExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  Assign() {
    return this.getToken(JavaScriptParser.Assign, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterAssignmentExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitAssignmentExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitAssignmentExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.AssignmentExpressionContext = AssignmentExpressionContext;
class PostDecreaseExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  MinusMinus() {
    return this.getToken(JavaScriptParser.MinusMinus, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterPostDecreaseExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitPostDecreaseExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitPostDecreaseExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.PostDecreaseExpressionContext = PostDecreaseExpressionContext;
class TypeofExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  Typeof() {
    return this.getToken(JavaScriptParser.Typeof, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterTypeofExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitTypeofExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitTypeofExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.TypeofExpressionContext = TypeofExpressionContext;
class InstanceofExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  Instanceof() {
    return this.getToken(JavaScriptParser.Instanceof, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterInstanceofExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitInstanceofExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitInstanceofExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.InstanceofExpressionContext = InstanceofExpressionContext;
class UnaryPlusExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  Plus() {
    return this.getToken(JavaScriptParser.Plus, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterUnaryPlusExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitUnaryPlusExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitUnaryPlusExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.UnaryPlusExpressionContext = UnaryPlusExpressionContext;
class DeleteExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  Delete() {
    return this.getToken(JavaScriptParser.Delete, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterDeleteExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitDeleteExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitDeleteExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.DeleteExpressionContext = DeleteExpressionContext;
class ImportExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  Import() {
    return this.getToken(JavaScriptParser.Import, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterImportExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitImportExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitImportExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.ImportExpressionContext = ImportExpressionContext;
class EqualityExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  Equals_() {
    return this.getToken(JavaScriptParser.Equals_, 0);
  }
  NotEquals() {
    return this.getToken(JavaScriptParser.NotEquals, 0);
  }
  IdentityEquals() {
    return this.getToken(JavaScriptParser.IdentityEquals, 0);
  }
  IdentityNotEquals() {
    return this.getToken(JavaScriptParser.IdentityNotEquals, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterEqualityExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitEqualityExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitEqualityExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.EqualityExpressionContext = EqualityExpressionContext;
class BitXOrExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  BitXOr() {
    return this.getToken(JavaScriptParser.BitXOr, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterBitXOrExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitBitXOrExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitBitXOrExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.BitXOrExpressionContext = BitXOrExpressionContext;
class SuperExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  Super() {
    return this.getToken(JavaScriptParser.Super, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterSuperExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitSuperExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitSuperExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.SuperExpressionContext = SuperExpressionContext;
class MultiplicativeExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  Multiply() {
    return this.getToken(JavaScriptParser.Multiply, 0);
  }
  Divide() {
    return this.getToken(JavaScriptParser.Divide, 0);
  }
  Modulus() {
    return this.getToken(JavaScriptParser.Modulus, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterMultiplicativeExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitMultiplicativeExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitMultiplicativeExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext;
class BitShiftExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  LeftShiftArithmetic() {
    return this.getToken(JavaScriptParser.LeftShiftArithmetic, 0);
  }
  RightShiftArithmetic() {
    return this.getToken(JavaScriptParser.RightShiftArithmetic, 0);
  }
  RightShiftLogical() {
    return this.getToken(JavaScriptParser.RightShiftLogical, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterBitShiftExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitBitShiftExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitBitShiftExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.BitShiftExpressionContext = BitShiftExpressionContext;
class ParenthesizedExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterParenthesizedExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitParenthesizedExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitParenthesizedExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;
class AdditiveExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  Plus() {
    return this.getToken(JavaScriptParser.Plus, 0);
  }
  Minus() {
    return this.getToken(JavaScriptParser.Minus, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterAdditiveExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitAdditiveExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitAdditiveExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.AdditiveExpressionContext = AdditiveExpressionContext;
class RelationalExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  LessThan() {
    return this.getToken(JavaScriptParser.LessThan, 0);
  }
  MoreThan() {
    return this.getToken(JavaScriptParser.MoreThan, 0);
  }
  LessThanEquals() {
    return this.getToken(JavaScriptParser.LessThanEquals, 0);
  }
  GreaterThanEquals() {
    return this.getToken(JavaScriptParser.GreaterThanEquals, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterRelationalExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitRelationalExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitRelationalExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.RelationalExpressionContext = RelationalExpressionContext;
class PostIncrementExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  PlusPlus() {
    return this.getToken(JavaScriptParser.PlusPlus, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterPostIncrementExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitPostIncrementExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitPostIncrementExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.PostIncrementExpressionContext = PostIncrementExpressionContext;
class YieldExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  yieldStatement() {
    return this.getTypedRuleContext(YieldStatementContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterYieldExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitYieldExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitYieldExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.YieldExpressionContext = YieldExpressionContext;
class BitNotExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  BitNot() {
    return this.getToken(JavaScriptParser.BitNot, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterBitNotExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitBitNotExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitBitNotExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.BitNotExpressionContext = BitNotExpressionContext;
class NewExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  New() {
    return this.getToken(JavaScriptParser.New, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  arguments() {
    return this.getTypedRuleContext(ArgumentsContext, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterNewExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitNewExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitNewExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.NewExpressionContext = NewExpressionContext;
class LiteralExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  literal() {
    return this.getTypedRuleContext(LiteralContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterLiteralExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitLiteralExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitLiteralExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.LiteralExpressionContext = LiteralExpressionContext;
class ArrayLiteralExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  arrayLiteral() {
    return this.getTypedRuleContext(ArrayLiteralContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterArrayLiteralExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitArrayLiteralExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitArrayLiteralExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.ArrayLiteralExpressionContext = ArrayLiteralExpressionContext;
class MemberDotExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  Dot() {
    return this.getToken(JavaScriptParser.Dot, 0);
  }
  identifierName() {
    return this.getTypedRuleContext(IdentifierNameContext, 0);
  }
  QuestionMark() {
    return this.getToken(JavaScriptParser.QuestionMark, 0);
  }
  Hashtag() {
    return this.getToken(JavaScriptParser.Hashtag, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterMemberDotExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitMemberDotExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitMemberDotExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.MemberDotExpressionContext = MemberDotExpressionContext;
class ClassExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  Class() {
    return this.getToken(JavaScriptParser.Class, 0);
  }
  classTail() {
    return this.getTypedRuleContext(ClassTailContext, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterClassExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitClassExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitClassExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.ClassExpressionContext = ClassExpressionContext;
class MemberIndexExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  OpenBracket() {
    return this.getToken(JavaScriptParser.OpenBracket, 0);
  }
  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }
  CloseBracket() {
    return this.getToken(JavaScriptParser.CloseBracket, 0);
  }
  QuestionMarkDot() {
    return this.getToken(JavaScriptParser.QuestionMarkDot, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterMemberIndexExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitMemberIndexExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitMemberIndexExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.MemberIndexExpressionContext = MemberIndexExpressionContext;
class IdentifierExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterIdentifierExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitIdentifierExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitIdentifierExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.IdentifierExpressionContext = IdentifierExpressionContext;
class BitAndExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  BitAnd() {
    return this.getToken(JavaScriptParser.BitAnd, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterBitAndExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitBitAndExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitBitAndExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.BitAndExpressionContext = BitAndExpressionContext;
class BitOrExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  BitOr() {
    return this.getToken(JavaScriptParser.BitOr, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterBitOrExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitBitOrExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitBitOrExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.BitOrExpressionContext = BitOrExpressionContext;
class AssignmentOperatorExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  assignmentOperator() {
    return this.getTypedRuleContext(AssignmentOperatorContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterAssignmentOperatorExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitAssignmentOperatorExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitAssignmentOperatorExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.AssignmentOperatorExpressionContext = AssignmentOperatorExpressionContext;
class VoidExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  Void() {
    return this.getToken(JavaScriptParser.Void, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterVoidExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitVoidExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitVoidExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.VoidExpressionContext = VoidExpressionContext;
class CoalesceExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  NullCoalesce() {
    return this.getToken(JavaScriptParser.NullCoalesce, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterCoalesceExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitCoalesceExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitCoalesceExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.CoalesceExpressionContext = CoalesceExpressionContext;
class InitializerContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_initializer;
  }
  Assign() {
    return this.getToken(JavaScriptParser.Assign, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterInitializer(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitInitializer(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitInitializer(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AssignableContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_assignable;
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  keyword() {
    return this.getTypedRuleContext(KeywordContext, 0);
  }
  arrayLiteral() {
    return this.getTypedRuleContext(ArrayLiteralContext, 0);
  }
  objectLiteral() {
    return this.getTypedRuleContext(ObjectLiteralContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterAssignable(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitAssignable(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitAssignable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ObjectLiteralContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_objectLiteral;
  }
  OpenBrace() {
    return this.getToken(JavaScriptParser.OpenBrace, 0);
  }
  CloseBrace() {
    return this.getToken(JavaScriptParser.CloseBrace, 0);
  }
  propertyAssignment = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(PropertyAssignmentContext);
    } else {
      return this.getTypedRuleContext(PropertyAssignmentContext, i);
    }
  };
  Comma = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaScriptParser.Comma);
    } else {
      return this.getToken(JavaScriptParser.Comma, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterObjectLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitObjectLiteral(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitObjectLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AnonymousFunctionContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_anonymousFunction;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
class AnonymousFunctionDeclContext extends AnonymousFunctionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  Function_() {
    return this.getToken(JavaScriptParser.Function_, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  functionBody() {
    return this.getTypedRuleContext(FunctionBodyContext, 0);
  }
  Async() {
    return this.getToken(JavaScriptParser.Async, 0);
  }
  Multiply() {
    return this.getToken(JavaScriptParser.Multiply, 0);
  }
  formalParameterList() {
    return this.getTypedRuleContext(FormalParameterListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterAnonymousFunctionDecl(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitAnonymousFunctionDecl(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitAnonymousFunctionDecl(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.AnonymousFunctionDeclContext = AnonymousFunctionDeclContext;
class ArrowFunctionContext extends AnonymousFunctionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  arrowFunctionParameters() {
    return this.getTypedRuleContext(ArrowFunctionParametersContext, 0);
  }
  ARROW() {
    return this.getToken(JavaScriptParser.ARROW, 0);
  }
  arrowFunctionBody() {
    return this.getTypedRuleContext(ArrowFunctionBodyContext, 0);
  }
  Async() {
    return this.getToken(JavaScriptParser.Async, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterArrowFunction(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitArrowFunction(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitArrowFunction(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.ArrowFunctionContext = ArrowFunctionContext;
class NamedFunctionContext extends AnonymousFunctionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }
  functionDeclaration() {
    return this.getTypedRuleContext(FunctionDeclarationContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterNamedFunction(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitNamedFunction(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitNamedFunction(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.NamedFunctionContext = NamedFunctionContext;
class ArrowFunctionParametersContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_arrowFunctionParameters;
  }
  propertyName() {
    return this.getTypedRuleContext(PropertyNameContext, 0);
  }
  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }
  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }
  formalParameterList() {
    return this.getTypedRuleContext(FormalParameterListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterArrowFunctionParameters(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitArrowFunctionParameters(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitArrowFunctionParameters(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ArrowFunctionBodyContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_arrowFunctionBody;
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  functionBody() {
    return this.getTypedRuleContext(FunctionBodyContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterArrowFunctionBody(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitArrowFunctionBody(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitArrowFunctionBody(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AssignmentOperatorContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_assignmentOperator;
  }
  MultiplyAssign() {
    return this.getToken(JavaScriptParser.MultiplyAssign, 0);
  }
  DivideAssign() {
    return this.getToken(JavaScriptParser.DivideAssign, 0);
  }
  ModulusAssign() {
    return this.getToken(JavaScriptParser.ModulusAssign, 0);
  }
  PlusAssign() {
    return this.getToken(JavaScriptParser.PlusAssign, 0);
  }
  MinusAssign() {
    return this.getToken(JavaScriptParser.MinusAssign, 0);
  }
  LeftShiftArithmeticAssign() {
    return this.getToken(JavaScriptParser.LeftShiftArithmeticAssign, 0);
  }
  RightShiftArithmeticAssign() {
    return this.getToken(JavaScriptParser.RightShiftArithmeticAssign, 0);
  }
  RightShiftLogicalAssign() {
    return this.getToken(JavaScriptParser.RightShiftLogicalAssign, 0);
  }
  BitAndAssign() {
    return this.getToken(JavaScriptParser.BitAndAssign, 0);
  }
  BitXorAssign() {
    return this.getToken(JavaScriptParser.BitXorAssign, 0);
  }
  BitOrAssign() {
    return this.getToken(JavaScriptParser.BitOrAssign, 0);
  }
  PowerAssign() {
    return this.getToken(JavaScriptParser.PowerAssign, 0);
  }
  NullishCoalescingAssign() {
    return this.getToken(JavaScriptParser.NullishCoalescingAssign, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterAssignmentOperator(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitAssignmentOperator(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitAssignmentOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class LiteralContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_literal;
  }
  NullLiteral() {
    return this.getToken(JavaScriptParser.NullLiteral, 0);
  }
  BooleanLiteral() {
    return this.getToken(JavaScriptParser.BooleanLiteral, 0);
  }
  StringLiteral() {
    return this.getToken(JavaScriptParser.StringLiteral, 0);
  }
  templateStringLiteral() {
    return this.getTypedRuleContext(TemplateStringLiteralContext, 0);
  }
  RegularExpressionLiteral() {
    return this.getToken(JavaScriptParser.RegularExpressionLiteral, 0);
  }
  numericLiteral() {
    return this.getTypedRuleContext(NumericLiteralContext, 0);
  }
  bigintLiteral() {
    return this.getTypedRuleContext(BigintLiteralContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitLiteral(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TemplateStringLiteralContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_templateStringLiteral;
  }
  BackTick = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaScriptParser.BackTick);
    } else {
      return this.getToken(JavaScriptParser.BackTick, i);
    }
  };
  templateStringAtom = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TemplateStringAtomContext);
    } else {
      return this.getTypedRuleContext(TemplateStringAtomContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterTemplateStringLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitTemplateStringLiteral(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitTemplateStringLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TemplateStringAtomContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_templateStringAtom;
  }
  TemplateStringAtom() {
    return this.getToken(JavaScriptParser.TemplateStringAtom, 0);
  }
  TemplateStringStartExpression() {
    return this.getToken(JavaScriptParser.TemplateStringStartExpression, 0);
  }
  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }
  TemplateCloseBrace() {
    return this.getToken(JavaScriptParser.TemplateCloseBrace, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterTemplateStringAtom(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitTemplateStringAtom(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitTemplateStringAtom(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class NumericLiteralContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_numericLiteral;
  }
  DecimalLiteral() {
    return this.getToken(JavaScriptParser.DecimalLiteral, 0);
  }
  HexIntegerLiteral() {
    return this.getToken(JavaScriptParser.HexIntegerLiteral, 0);
  }
  OctalIntegerLiteral() {
    return this.getToken(JavaScriptParser.OctalIntegerLiteral, 0);
  }
  OctalIntegerLiteral2() {
    return this.getToken(JavaScriptParser.OctalIntegerLiteral2, 0);
  }
  BinaryIntegerLiteral() {
    return this.getToken(JavaScriptParser.BinaryIntegerLiteral, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterNumericLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitNumericLiteral(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitNumericLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class BigintLiteralContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_bigintLiteral;
  }
  BigDecimalIntegerLiteral() {
    return this.getToken(JavaScriptParser.BigDecimalIntegerLiteral, 0);
  }
  BigHexIntegerLiteral() {
    return this.getToken(JavaScriptParser.BigHexIntegerLiteral, 0);
  }
  BigOctalIntegerLiteral() {
    return this.getToken(JavaScriptParser.BigOctalIntegerLiteral, 0);
  }
  BigBinaryIntegerLiteral() {
    return this.getToken(JavaScriptParser.BigBinaryIntegerLiteral, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterBigintLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitBigintLiteral(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitBigintLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class GetterContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_getter;
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  classElementName() {
    return this.getTypedRuleContext(ClassElementNameContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterGetter(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitGetter(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitGetter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class SetterContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_setter;
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  classElementName() {
    return this.getTypedRuleContext(ClassElementNameContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterSetter(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitSetter(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitSetter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class IdentifierNameContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_identifierName;
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  reservedWord() {
    return this.getTypedRuleContext(ReservedWordContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterIdentifierName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitIdentifierName(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitIdentifierName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class IdentifierContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_identifier;
  }
  Identifier() {
    return this.getToken(JavaScriptParser.Identifier, 0);
  }
  NonStrictLet() {
    return this.getToken(JavaScriptParser.NonStrictLet, 0);
  }
  Async() {
    return this.getToken(JavaScriptParser.Async, 0);
  }
  As() {
    return this.getToken(JavaScriptParser.As, 0);
  }
  From() {
    return this.getToken(JavaScriptParser.From, 0);
  }
  Yield() {
    return this.getToken(JavaScriptParser.Yield, 0);
  }
  Of() {
    return this.getToken(JavaScriptParser.Of, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterIdentifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitIdentifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitIdentifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ReservedWordContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_reservedWord;
  }
  keyword() {
    return this.getTypedRuleContext(KeywordContext, 0);
  }
  NullLiteral() {
    return this.getToken(JavaScriptParser.NullLiteral, 0);
  }
  BooleanLiteral() {
    return this.getToken(JavaScriptParser.BooleanLiteral, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterReservedWord(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitReservedWord(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitReservedWord(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class KeywordContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_keyword;
  }
  Break() {
    return this.getToken(JavaScriptParser.Break, 0);
  }
  Do() {
    return this.getToken(JavaScriptParser.Do, 0);
  }
  Instanceof() {
    return this.getToken(JavaScriptParser.Instanceof, 0);
  }
  Typeof() {
    return this.getToken(JavaScriptParser.Typeof, 0);
  }
  Case() {
    return this.getToken(JavaScriptParser.Case, 0);
  }
  Else() {
    return this.getToken(JavaScriptParser.Else, 0);
  }
  New() {
    return this.getToken(JavaScriptParser.New, 0);
  }
  Var() {
    return this.getToken(JavaScriptParser.Var, 0);
  }
  Catch() {
    return this.getToken(JavaScriptParser.Catch, 0);
  }
  Finally() {
    return this.getToken(JavaScriptParser.Finally, 0);
  }
  Return() {
    return this.getToken(JavaScriptParser.Return, 0);
  }
  Void() {
    return this.getToken(JavaScriptParser.Void, 0);
  }
  Continue() {
    return this.getToken(JavaScriptParser.Continue, 0);
  }
  For() {
    return this.getToken(JavaScriptParser.For, 0);
  }
  Switch() {
    return this.getToken(JavaScriptParser.Switch, 0);
  }
  While() {
    return this.getToken(JavaScriptParser.While, 0);
  }
  Debugger() {
    return this.getToken(JavaScriptParser.Debugger, 0);
  }
  Function_() {
    return this.getToken(JavaScriptParser.Function_, 0);
  }
  This() {
    return this.getToken(JavaScriptParser.This, 0);
  }
  With() {
    return this.getToken(JavaScriptParser.With, 0);
  }
  Default() {
    return this.getToken(JavaScriptParser.Default, 0);
  }
  If() {
    return this.getToken(JavaScriptParser.If, 0);
  }
  Throw() {
    return this.getToken(JavaScriptParser.Throw, 0);
  }
  Delete() {
    return this.getToken(JavaScriptParser.Delete, 0);
  }
  In() {
    return this.getToken(JavaScriptParser.In, 0);
  }
  Try() {
    return this.getToken(JavaScriptParser.Try, 0);
  }
  Class() {
    return this.getToken(JavaScriptParser.Class, 0);
  }
  Enum() {
    return this.getToken(JavaScriptParser.Enum, 0);
  }
  Extends() {
    return this.getToken(JavaScriptParser.Extends, 0);
  }
  Super() {
    return this.getToken(JavaScriptParser.Super, 0);
  }
  Const() {
    return this.getToken(JavaScriptParser.Const, 0);
  }
  Export() {
    return this.getToken(JavaScriptParser.Export, 0);
  }
  Import() {
    return this.getToken(JavaScriptParser.Import, 0);
  }
  Implements() {
    return this.getToken(JavaScriptParser.Implements, 0);
  }
  let_() {
    return this.getTypedRuleContext(Let_Context, 0);
  }
  Private() {
    return this.getToken(JavaScriptParser.Private, 0);
  }
  Public() {
    return this.getToken(JavaScriptParser.Public, 0);
  }
  Interface() {
    return this.getToken(JavaScriptParser.Interface, 0);
  }
  Package() {
    return this.getToken(JavaScriptParser.Package, 0);
  }
  Protected() {
    return this.getToken(JavaScriptParser.Protected, 0);
  }
  Static() {
    return this.getToken(JavaScriptParser.Static, 0);
  }
  Yield() {
    return this.getToken(JavaScriptParser.Yield, 0);
  }
  YieldStar() {
    return this.getToken(JavaScriptParser.YieldStar, 0);
  }
  Async() {
    return this.getToken(JavaScriptParser.Async, 0);
  }
  Await() {
    return this.getToken(JavaScriptParser.Await, 0);
  }
  From() {
    return this.getToken(JavaScriptParser.From, 0);
  }
  As() {
    return this.getToken(JavaScriptParser.As, 0);
  }
  Of() {
    return this.getToken(JavaScriptParser.Of, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterKeyword(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitKeyword(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitKeyword(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class Let_Context extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_let_;
  }
  NonStrictLet() {
    return this.getToken(JavaScriptParser.NonStrictLet, 0);
  }
  StrictLet() {
    return this.getToken(JavaScriptParser.StrictLet, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterLet_(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitLet_(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitLet_(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class EosContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_eos;
  }
  SemiColon() {
    return this.getToken(JavaScriptParser.SemiColon, 0);
  }
  EOF() {
    return this.getToken(JavaScriptParser.EOF, 0);
  }
  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterEos(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitEos(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitEos(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaScriptParser.ProgramContext = ProgramContext;
JavaScriptParser.SourceElementContext = SourceElementContext;
JavaScriptParser.StatementContext = StatementContext;
JavaScriptParser.BlockContext = BlockContext;
JavaScriptParser.StatementListContext = StatementListContext;
JavaScriptParser.ImportStatementContext = ImportStatementContext;
JavaScriptParser.ImportFromBlockContext = ImportFromBlockContext;
JavaScriptParser.ImportModuleItemsContext = ImportModuleItemsContext;
JavaScriptParser.ImportAliasNameContext = ImportAliasNameContext;
JavaScriptParser.ModuleExportNameContext = ModuleExportNameContext;
JavaScriptParser.ImportedBindingContext = ImportedBindingContext;
JavaScriptParser.ImportDefaultContext = ImportDefaultContext;
JavaScriptParser.ImportNamespaceContext = ImportNamespaceContext;
JavaScriptParser.ImportFromContext = ImportFromContext;
JavaScriptParser.AliasNameContext = AliasNameContext;
JavaScriptParser.ExportStatementContext = ExportStatementContext;
JavaScriptParser.ExportFromBlockContext = ExportFromBlockContext;
JavaScriptParser.ExportModuleItemsContext = ExportModuleItemsContext;
JavaScriptParser.ExportAliasNameContext = ExportAliasNameContext;
JavaScriptParser.DeclarationContext = DeclarationContext;
JavaScriptParser.VariableStatementContext = VariableStatementContext;
JavaScriptParser.VariableDeclarationListContext = VariableDeclarationListContext;
JavaScriptParser.VariableDeclarationContext = VariableDeclarationContext;
JavaScriptParser.EmptyStatement_Context = EmptyStatement_Context;
JavaScriptParser.ExpressionStatementContext = ExpressionStatementContext;
JavaScriptParser.IfStatementContext = IfStatementContext;
JavaScriptParser.IterationStatementContext = IterationStatementContext;
JavaScriptParser.VarModifierContext = VarModifierContext;
JavaScriptParser.ContinueStatementContext = ContinueStatementContext;
JavaScriptParser.BreakStatementContext = BreakStatementContext;
JavaScriptParser.ReturnStatementContext = ReturnStatementContext;
JavaScriptParser.YieldStatementContext = YieldStatementContext;
JavaScriptParser.WithStatementContext = WithStatementContext;
JavaScriptParser.SwitchStatementContext = SwitchStatementContext;
JavaScriptParser.CaseBlockContext = CaseBlockContext;
JavaScriptParser.CaseClausesContext = CaseClausesContext;
JavaScriptParser.CaseClauseContext = CaseClauseContext;
JavaScriptParser.DefaultClauseContext = DefaultClauseContext;
JavaScriptParser.LabelledStatementContext = LabelledStatementContext;
JavaScriptParser.ThrowStatementContext = ThrowStatementContext;
JavaScriptParser.TryStatementContext = TryStatementContext;
JavaScriptParser.CatchProductionContext = CatchProductionContext;
JavaScriptParser.FinallyProductionContext = FinallyProductionContext;
JavaScriptParser.DebuggerStatementContext = DebuggerStatementContext;
JavaScriptParser.FunctionDeclarationContext = FunctionDeclarationContext;
JavaScriptParser.ClassDeclarationContext = ClassDeclarationContext;
JavaScriptParser.ClassTailContext = ClassTailContext;
JavaScriptParser.ClassElementContext = ClassElementContext;
JavaScriptParser.MethodDefinitionContext = MethodDefinitionContext;
JavaScriptParser.FieldDefinitionContext = FieldDefinitionContext;
JavaScriptParser.ClassElementNameContext = ClassElementNameContext;
JavaScriptParser.PrivateIdentifierContext = PrivateIdentifierContext;
JavaScriptParser.FormalParameterListContext = FormalParameterListContext;
JavaScriptParser.FormalParameterArgContext = FormalParameterArgContext;
JavaScriptParser.LastFormalParameterArgContext = LastFormalParameterArgContext;
JavaScriptParser.FunctionBodyContext = FunctionBodyContext;
JavaScriptParser.SourceElementsContext = SourceElementsContext;
JavaScriptParser.ArrayLiteralContext = ArrayLiteralContext;
JavaScriptParser.ElementListContext = ElementListContext;
JavaScriptParser.ArrayElementContext = ArrayElementContext;
JavaScriptParser.PropertyAssignmentContext = PropertyAssignmentContext;
JavaScriptParser.PropertyNameContext = PropertyNameContext;
JavaScriptParser.ArgumentsContext = ArgumentsContext;
JavaScriptParser.ArgumentContext = ArgumentContext;
JavaScriptParser.ExpressionSequenceContext = ExpressionSequenceContext;
JavaScriptParser.SingleExpressionContext = SingleExpressionContext;
JavaScriptParser.InitializerContext = InitializerContext;
JavaScriptParser.AssignableContext = AssignableContext;
JavaScriptParser.ObjectLiteralContext = ObjectLiteralContext;
JavaScriptParser.AnonymousFunctionContext = AnonymousFunctionContext;
JavaScriptParser.ArrowFunctionParametersContext = ArrowFunctionParametersContext;
JavaScriptParser.ArrowFunctionBodyContext = ArrowFunctionBodyContext;
JavaScriptParser.AssignmentOperatorContext = AssignmentOperatorContext;
JavaScriptParser.LiteralContext = LiteralContext;
JavaScriptParser.TemplateStringLiteralContext = TemplateStringLiteralContext;
JavaScriptParser.TemplateStringAtomContext = TemplateStringAtomContext;
JavaScriptParser.NumericLiteralContext = NumericLiteralContext;
JavaScriptParser.BigintLiteralContext = BigintLiteralContext;
JavaScriptParser.GetterContext = GetterContext;
JavaScriptParser.SetterContext = SetterContext;
JavaScriptParser.IdentifierNameContext = IdentifierNameContext;
JavaScriptParser.IdentifierContext = IdentifierContext;
JavaScriptParser.ReservedWordContext = ReservedWordContext;
JavaScriptParser.KeywordContext = KeywordContext;
JavaScriptParser.Let_Context = Let_Context;
JavaScriptParser.EosContext = EosContext;